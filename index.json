[{"uri":"/other/article/","title":"Blogpost","tags":[],"description":"","content":"A bit more background about this useragent parser can be found in this blog which I wrote about it: https://techlab.bol.com/making-sense-user-agent-string/\n"},{"uri":"/developer/building/","title":"Building from source","tags":[],"description":"","content":"Building Requirements:\n A Linux class machine (can be a VM) The normal build tools for a Java project (i.e. maven 3.6+ and jdk 11)  The ./start-docker.sh script launches a docker based build environment with all needed tools.    and then simply do:\nmvn clean package "},{"uri":"/expect/fieldvalues/","title":"Field values","tags":[],"description":"","content":"Output fields The resulting output fields can be classified into several categories:\n The Device: The hardware that was used. The Operating System: The base software that runs on the hardware The Layout Engine: The underlying core that converts the \u0026lsquo;HTML\u0026rsquo; into a visual/interactive The Agent: The actual \u0026ldquo;Browser\u0026rdquo; that was used. Extra fields: In some cases we have additional fields to describe the agent. These fields are among others specific fields for the Facebook and Kobo apps, and fields to describe deliberate useragent manipulation situations (Anonymization, Hackers, etc.)  Note that not all fields are always available. So if you look at a specific field you will in general find null values and \u0026ldquo;Unknown\u0026rdquo; in there as well.\nThere are as little as possible lookup tables included the system really tries to analyze the useragent and extract values from it. The aim of this approach is to have a system that can classify as much traffic as possible yet require as little as possible maintenance because all versions and in many places also the names of the used components are extracted without knowing them beforehand.\nValues explained DeviceClass    Value Meaning     Desktop The device is assessed as a Desktop/Laptop class device   Anonymized In some cases the useragent has been altered by anonymization software   Unknown We really don\u0026rsquo;t know, these are usually useragents that look normal yet contain almost no information about the device   Mobile A device that is mobile yet we do not know if it is a eReader/Tablet/Phone or Watch   Tablet A mobile device with a rather large screen (common \u0026gt; 7\u0026quot;)   Phone A mobile device with a small screen (common \u0026lt; 7\u0026quot;)   Watch A mobile device with a tiny screen (common \u0026lt; 2\u0026quot;). Normally these are an additional screen for a phone/tablet type device.   Augmented Reality A mobile device with a AR capabilities (like Google Glass)   Virtual Reality A mobile device with a VR capabilities   eReader Similar to a Tablet yet in most cases with an eInk screen   Set-top box A connected device that allows interacting via a TV sized screen   TV Similar to Set-top box yet here this is built into the TV   Game Console \u0026lsquo;Fixed\u0026rsquo; game systems like the PlayStation and XBox   Handheld Game Console \u0026lsquo;Mobile\u0026rsquo; game systems like the 3DS   Voice A voice driven device (i.e. ask a question and the page is read aloud). Like Alexa and Google Home.   Car A Car based browser as found in for example the Tesla vehicles   Robot Robots that visit the site   Robot Mobile Robots that visit the site indicating they want to be seen as a Mobile visitor   Robot Imitator Robots that visit the site pretending they are robots like google, but they are not. Note that in most cases they ARE Robots.   Hacker In case scripting is detected in the useragent string, also fallback in really broken situations    OperatingSystemClass    Value Meaning     Desktop The type of OS you would run on a Desktop or Laptop   Mobile The type of OS you would run on a Phone, Tablet or Watch   Cloud Looks like a thing that runs in a cloud environment   Embedded Apparently embedded into something like a TV   Game Console A game console like PS4, Xbox   Hacker A hacker, so it can really be anything.   Anonymized It was explicitly hidden   Unknown We don\u0026rsquo;t know    LayoutEngineClass    Value Meaning     Browser A regular browser   Mobile App A mobile app which probably includes a regular webbrowser   Hacker A hacker, so it can really be anything.   Robot A robot spidering the site   Special Something special we cannot fully classify   Unknown We don\u0026rsquo;t know    AgentClass    Value Meaning     Browser A regular browser   Browser Webview A regular browser being used as part of a mobile app   Mobile App A mobile app   Robot A robot that wants to be treated as a desktop device   Robot Mobile A robot that wants to be treated as a mobile device   Cloud Application Something running in a cloud (but not a regular robot)   Email Client This is an email application that did the request   Voice A voice driven \u0026lsquo;browser\u0026rsquo; (i.e. ask a question and the page is read aloud). Like Alexa and Google Home.   Special Something special we cannot fully classify   Testclient A website testing tool   Hacker A hacker, so it can really be anything.   Unknown We don\u0026rsquo;t know    AgentSecurity    Value Meaning     Weak security Indicated to use deliberately weakened encryption (usually due to export restrictions or local laws).   Strong security Indicated to use strong (normal) encryption.   Unknown It was not specified (very common)   Hacker A hacker, so it can really be anything.    "},{"uri":"/expect/","title":"What to expect","tags":[],"description":"","content":"This library extracts as many as possible fields from the provided User-Agent value.\nAs an example the useragent of my phone (from a while ago):\nMozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD90Z) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.124 Mobile Safari/537.36 is converted into this set of fields:\n   Field name Value     Device Class Phone   Device Name Google Nexus 6   Device Brand Google   Operating System Class Mobile   Operating System Name Android   Operating System Version 7.0   Operating System Name Version Android 7.0   Operating System Version Build NBD90Z   Layout Engine Class Browser   Layout Engine Name Blink   Layout Engine Version 53.0   Layout Engine Version Major 53   Layout Engine Name Version Blink 53.0   Layout Engine Name Version Major Blink 53   Agent Class Browser   Agent Name Chrome   Agent Version 53.0.2785.124   Agent Version Major 53   Agent Name Version Chrome 53.0.2785.124   Agent Name Version Major Chrome 53    "},{"uri":"/developer/basedesign/","title":"Base Design","tags":[],"description":"","content":"Parsing Useragents Parsing useragents is considered by many to be a ridiculously hard problem. The main problems are:\n Although there seems to be a specification, many do not follow it. Useragents LIE that they are their competing predecessor with an extra flag.  The pattern the \u0026rsquo;normal\u0026rsquo; browser builders are following is that they all LIE about the ancestor they are trying to improve upon.\nThe reason this system (historically) works is because a lot of website builders do a very simple check to see if they can use a specific feature.\nif (useragent.contains(\u0026#34;Chrome\u0026#34;)) {  // Use the chrome feature we need. } Some may improve on this an actually check the (major) version that follows.\nA good example of this is the Edge browser:\nMozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10136 It says it:\n is Mozilla/5.0 uses AppleWebKit/537.36 for \u0026ldquo;compatibility\u0026rdquo; the AppleWebKit lie about being \u0026ldquo;KHTML\u0026rdquo; and that it is similar to \u0026ldquo;Gecko\u0026rdquo; are also copied is Chrome 42 is Safari 537 is Edge 12  So any website looking for the word it triggers upon will find it and enable the right features.\nIn 2014 an RFC for HTTP was released (RFC 7231 section 5.5.3) which now explicitly states:\n... implementations are encouraged not to use the product tokens of other implementations in order to declare compatibility with them, as this circumvents the purpose of the field.  \u0026hellip; encouraged \u0026hellip;\nHow many other analyzers work When looking at most implementations of analysing the useragents I see that most implementations are based around lists of regular expressions. These are (in the systems I have seen) executed in a specific order to find the first one that matches.\nIn this solution direction the order in which things occur determines if the patterns match or not.\nRegular expressions are notoriously hard to write and debug and (unless you make them really complex) the order in which parts of the pattern occur is fixed.\nCore design idea I wanted to see if a completely different approach would work: Can we actually parse these things into a tree and work from there.\nThe parser (ANTLR4 based) will be able to parse a lot of the agents but not all. Tests have shown that it will parse \u0026gt;99% of all useragents on a large website which is more than 99.99% of the traffic.\nNow the ones that it is not able to parse are the ones that have been set manually to an invalid value. So if that happens we assume you are a hacker. In all other cases we have matchers that are triggered if a specific value is found by the parser. Such a matcher then tells this class is has found a match for a certain attribute with a certain confidence level (0-10000000). In the end the matcher that has found a match with the highest confidence for a value \u0026lsquo;wins\u0026rsquo;.\nHigh level implementation overview The main concept of this useragent parser is that we have two things:\n A Parser (ANTLR4) that converts the useragent into a nice tree through which we can walk along. A collection of matchers.   A matcher triggers if a set of patterns is present in the tree. Each pattern is detected by a \u0026ldquo;matcher action\u0026rdquo; that triggers and can fill a single attribute. If a matcher triggers a set of attributes get set with a value and a confidence level All results from all triggered matchers (and actions) are combined and for each individual attribute the \u0026lsquo;highest value\u0026rsquo; wins.  As a performance optimization we walk along the parsed tree once and fire everything we find into a precomputed hashmap that points to all the applicable matcher actions. As a consequence\n the matching is relatively fast even though the number of matchers already runs into the few hundreds. the startup is \u0026ldquo;slow\u0026rdquo; the memory footprint is pretty big due to the number of matchers, the size of the hashmap and the cache of the parsed useragents.  A much more in depth explanation can be found in the documentation on how to create new rules\n"},{"uri":"/expect/performance/","title":"Performance","tags":[],"description":"","content":"On my i7 system I see a speed ranging from 500 to 4000 useragents per second (depending on the length and ambiguities in the useragent). On average the speed is around 2000 per second or ~0.5ms each. A LRU cache is in place that does over 1M per second if they are in the cache.\nPlease note that the current system take approx 220MiB of RAM just for the engine (without any caching!!).\nIn the canonical usecase of analysing clickstream data you will see a \u0026lt;1ms hit per visitor (or better: per new non-cached useragent) and for all the other clicks the values are retrieved from this cache at a speed of \u0026lt; 1 microsecond (i.e. close to 0).\nThe graph below gives you some insight of how the performance of Yauaa has progressed over time.\nYou can clearly see the increase in the time needed when adding a lot more rules. Also the periodic drops in time needed are clearly visible when a performance improvement was found.\nBetween version 5.5 and 5.6 a lot of extra rules to detect more brands of mobile devices on Android (at one point during development the needed time to reached ~ 3ms). Followed by a few steps in a rewrite of that part resulting in effectively the fastest versions to date.\nOutput from the benchmark ( using this code ) on a Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz from version 4.0 onwards:\n\n  google.charts.load('current', {'packages':['corechart']}); google.charts.setOnLoadCallback(drawChart); function drawChart() { var data = google.visualization.arrayToDataTable([ ['Version','Android 7 Chrome 72','Android 6 Chrome 46','Android Phone','Google AdsBot','Google AdsBot Mobile','GoogleBot Mobile Android','GoogleBot','Hacker SQL','Hacker ShellShock','iPad','iPhone','iPhone FacebookApp','Linux Chrome 72','Win 10 Chrome 51','Win 10 Edge13','Win 7 IE11','Win 10 IE 11'], ['v4.0',0.487,0.511,0.660,0.192,0.318,0.543,0.222,0.172,0.154,0.293,0.288,0.580,0.265,0.262,0.278,0.316,0.311], ['v4.1',0.477,0.500,0.641,0.186,0.313,0.531,0.218,0.168,0.150,0.288,0.282,0.567,0.262,0.258,0.275,0.311,0.305], ['v4.2',0.497,0.520,0.668,0.195,0.325,0.552,0.228,0.176,0.157,0.299,0.295,0.588,0.273,0.270,0.287,0.326,0.320], ['v4.3',0.542,0.566,0.720,0.218,0.353,0.600,0.250,0.196,0.175,0.325,0.320,0.616,0.301,0.296,0.314,0.350,0.342], ['v4.4',0.504,0.528,0.663,0.208,0.332,0.563,0.239,0.189,0.171,0.306,0.301,0.581,0.283,0.279,0.295,0.330,0.325], ['v4.5',0.511,0.534,0.672,0.214,0.335,0.565,0.244,0.195,0.176,0.310,0.304,0.583,0.286,0.282,0.298,0.337,0.331], ['v5.0',0.528,0.553,0.699,0.216,0.343,0.585,0.249,0.197,0.179,0.317,0.312,0.601,0.293,0.289,0.306,0.347,0.341], ['v5.2',0.588,0.614,0.762,0.253,0.396,0.652,0.286,0.228,0.210,0.362,0.367,0.665,0.338,0.335,0.354,0.392,0.383], ['v5.3',0.564,0.586,0.732,0.237,0.381,0.623,0.272,0.217,0.197,0.347,0.350,0.641,0.323,0.318,0.336,0.374,0.364], ['v5.4',0.586,0.606,0.754,0.242,0.389,0.645,0.279,0.221,0.199,0.353,0.358,0.656,0.328,0.325,0.343,0.379,0.371], ['v5.5',0.773,0.787,0.934,0.314,0.464,0.817,0.347,0.289,0.266,0.425,0.423,0.740,0.401,0.397,0.415,0.452,0.439], ['v5.6',0.396,0.412,0.551,0.138,0.276,0.449,0.174,0.120,0.098,0.241,0.247,0.531,0.224,0.218,0.235,0.271,0.266], ['v5.7',0.421,0.437,0.579,0.155,0.295,0.476,0.191,0.136,0.115,0.259,0.265,0.554,0.241,0.235,0.252,0.292,0.289], ['v5.8',0.383,0.399,0.531,0.138,0.274,0.438,0.173,0.118,0.096,0.238,0.244,0.513,0.220,0.215,0.233,0.265,0.261], ['v5.9',0.350,0.378,0.527,0.090,0.223,0.418,0.129,0.055,0.022,0.177,0.198,0.478,0.171,0.169,0.187,0.224,0.211], ['v5.10',0.351,0.377,0.527,0.091,0.225,0.416,0.131,0.056,0.023,0.177,0.197,0.474,0.173,0.171,0.188,0.222,0.209], ['v5.11',0.346,0.376,0.517,0.095,0.227,0.416,0.135,0.058,0.025,0.181,0.200,0.473,0.177,0.174,0.192,0.223,0.210], ['v5.12',0.362,0.394,0.543,0.099,0.236,0.434,0.138,0.060,0.026,0.186,0.205,0.491,0.184,0.182,0.203,0.234,0.219], ['v5.13',0.340,0.369,0.506,0.089,0.224,0.411,0.135,0.059,0.024,0.176,0.194,0.470,0.172,0.170,0.189,0.217,0.205], ['v5.14',0.331,0.357,0.500,0.080,0.215,0.401,0.120,0.046,0.020,0.167,0.188,0.454,0.162,0.162,0.177,0.208,0.197], ['v5.14.1',0.334,0.360,0.502,0.081,0.215,0.403,0.121,0.046,0.021,0.174,0.183,0.462,0.162,0.159,0.178,0.209,0.198], ['v5.15',0.324,0.350,0.490,0.080,0.213,0.395,0.119,0.050,0.022,0.166,0.177,0.450,0.159,0.157,0.175,0.204,0.193], ['v5.16',0.350,0.376,0.519,0.088,0.235,0.421,0.128,0.053,0.023,0.188,0.197,0.486,0.176,0.174,0.192,0.224,0.211], ['v5.17',0.341,0.366,0.508,0.086,0.229,0.414,0.124,0.052,0.023,0.180,0.191,0.472,0.171,0.169,0.188,0.216,0.204], ['v5.18',0.373,0.394,0.540,0.103,0.246,0.440,0.143,0.064,0.029,0.193,0.209,0.504,0.187,0.187,0.207,0.240,0.226], ['v5.19',0.367,0.389,0.536,0.100,0.247,0.438,0.142,0.062,0.029,0.195,0.209,0.505,0.187,0.185,0.206,0.239,0.226], ['v5.20',0.378,0.396,0.546,0.101,0.249,0.445,0.143,0.064,0.031,0.195,0.211,0.510,0.190,0.187,0.208,0.245,0.232], ['v5.21',0.373,0.404,0.546,0.100,0.251,0.447,0.143,0.064,0.031,0.198,0.211,0.513,0.190,0.189,0.209,0.244,0.230], ['v5.22',0.377,0.403,0.555,0.104,0.255,0.450,0.145,0.066,0.032,0.199,0.214,0.528,0.192,0.193,0.214,0.247,0.235], ['v5.23',0.375,0.400,0.556,0.105,0.253,0.447,0.146,0.066,0.032,0.198,0.214,0.518,0.192,0.192,0.214,0.245,0.231], ['v6.0',0.385,0.418,0.571,0.108,0.263,0.463,0.149,0.069,0.032,0.204,0.219,0.545,0.197,0.197,0.222,0.257,0.242], ['v6.1',0.388,0.413,0.568,0.107,0.263,0.463,0.148,0.067,0.034,0.204,0.219,0.542,0.197,0.200,0.220,0.254,0.241], ['v6.2',0.367,0.391,0.550,0.099,0.247,0.439,0.138,0.063,0.032,0.194,0.206,0.516,0.182,0.184,0.206,0.242,0.230], ['v6.3',0.365,0.394,0.539,0.101,0.251,0.439,0.139,0.062,0.030,0.195,0.210,0.513,0.186,0.187,0.214,0.242,0.228], ]); var options = { title: 'Yauaa Performance (uncached speed in milliseconds)', chartArea:{ left: 50, right:50 , top: 50, bottom:300}, legend: { position: 'top', maxLines:4 } }; var chart = new google.visualization.LineChart(document.getElementById('curve_chart')); chart.draw(data, options); } google.charts.load('current', {'packages':['corechart']}); google.charts.setOnLoadCallback(drawChart); $(window).resize(function() { if(this.resizeTO) clearTimeout(this.resizeTO); this.resizeTO = setTimeout(function() { $(this).trigger('resizeEnd'); }, 500); }); $(window).on('resizeEnd', function() { drawChart(); });  "},{"uri":"/other/relatedprojects/","title":"Related projects","tags":[],"description":"","content":".NET port Stefano Balzarotti is putting a lot of effort into porting Yauaa to run in .NET standard.\nYou can track his efforts here on GitHub: Yauaa .NET standard and download his releases via Nuget.\n"},{"uri":"/using/","title":"Using the analyzer","tags":[],"description":"","content":"Using the analyzer To use this analyzer you can use it either directly in your Java based applications or use one of the User Defined Functions that are available for many of Apache bigdata tools (Pig, Hive, Flink, Beam, \u0026hellip;) as described here.\nUsing in Java applications To use the library you must first add it as a dependency to your application. The library has been published to maven central so that should work in almost any environment.\nIf you use a maven based project simply add this dependency to your project.\n\u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;nl.basjes.parse.useragent\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;yauaa\u0026lt;/artifactId\u0026gt;  \u0026lt;version\u0026gt;6.11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; and in your application you can use it as simple as this\nUserAgentAnalyzer uaa = UserAgentAnalyzer .newBuilder() .hideMatcherLoadStats() .withCache(10000) .build(); UserAgent agent = uaa.parse(\u0026quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11\u0026quot;); for (String fieldName: agent.getAvailableFieldNamesSorted()) { System.out.println(fieldName + \u0026quot; = \u0026quot; + agent.getValue(fieldName)); }  Please instantiate a new UserAgentAnalyzer as few times as possible because the initialization step for a full UserAgentAnalyzer (i.e. all fields) usually takes something in the range of 2-5 seconds. If you need multiple instances of the UserAgentAnalyzer then you MUST create a new Builder instance for each of those.\nNote that not all fields are available after every parse. So be prepared to receive a \u0026rsquo;null\u0026rsquo; or \u0026ldquo;Unknown\u0026rdquo; if you extract a specific name.\nCustom caching implementation Since version 6.7 you can specify a custom implementation for the cache by providing an instance of the factory interface CacheInstantiator.\nDo note that Yauaa assumes the caching implementation to be threadsafe. If you use a non-threadsafe implementation in a multithreaded context it will break.\nThe default caching implementation uses Caffeine (since version 6.8).\nreturn Caffeine.newBuilder().maximumSize(cacheSize).\u0026lt;String, ImmutableUserAgent\u0026gt;build().asMap();  A custom implementation can be specified via the Builder using the withCacheInstantiator(...) method:\nUserAgentAnalyzer uaa = UserAgentAnalyzer .newBuilder() .withCacheInstantiator( new CacheInstantiator() { @Override public Map\u0026lt;String, ImmutableUserAgent\u0026gt; instantiateCache(int cacheSize) { return new MyMuchBetterCacheImplementation(cacheSize); } } ) .withCache(10000) .build();  Running on Java 8 Yauaa 6.x still allows running on Java 8, yet the default caching library needs Java 11.\nIf you are still using Java 8 then you can fix this problem by using the LRUMap caching implementation that is part of the Apache commons-collections library and do something like this:\nUserAgentAnalyzer uaa = UserAgentAnalyzer .newBuilder() .withCacheInstantiator(cacheSize -\u0026gt; Collections.synchronizedMap(new LRUMap\u0026lt;\u0026gt;(cacheSize))) .withCache(10000) .build();  Logging dependencies The Yauaa engine uses Log4j2 as the primary logging framework; yet some of the transitive dependencies of this project use different logging frameworks.\nTo minimize the complexity of the dependency handling I have chosen to simply not include ANY logging framework and expect the consuming system to provide what ever fits best.\nSo in the end to use this you must provide either an implementation or a bridge for:\n Apache Log4j2 Apache (Jakarta) Commons logging (like org.apache.commons.logging.LogFactory) aka JCL. Simple Logging Facade for Java (SLF4J)  So it all depends on your exact context (i.e. which logging framework are you going to use) what the best solution is for you to make all of this logging work as intended.\nIn case you are using Apache Log4j2 you should have these dependencies in addition to Yauaa in your project\n\u0026lt;!-- The default logging implementation for Yauaa --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${log4j2.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-slf4j-impl\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${log4j2.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-jcl\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${log4j2.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;  NOTE: Some of those logging frameworks are only used in specific analysis situations (like robots with a url). To avoid failing only when such an event occurs a fail fast construct has been added: At the moment of creating the UserAgentAnalyzer (i.e. during the .build()) a temporary instance all of these Logging frameworks are created. If one of them is not present it will immediately throw an InvalidLoggingDependencyException (=RuntimeException).\nSerialization If your application needs to serialize the instance of the UserAgentAnalyzer then both the standard Java serialization and Kryo are supported. Note that with Kryo 5.x you need to register all classes and configure Kryo correctly.\nTo facilitate doing this correctly the static method configureKryo was created. So in general your code should look something like this:\n Kryo kryo = new Kryo(); UserAgentAnalyzer.configureKryo(kryo);  Note that both the serializing and the deserializing instance of Kryo must be configured in the same way.\nAvoid using it as a static member If you make the UserAgentAnalyzer a static member of a class then cleaning it up after use may be a problem. One case where this happens is in the context of something like Tomcat where a webapp is loaded and then unloaded. If the analyzer is a static member of your servlet then this unloading may retain a lot of the memory used for the internal data structures.\nCache size setting I recommend you leave the cache to a size that is roughly the unique number of useragents your site finds in a limited timespan. Something like 15/30/60 minutes usually gives you a fine cache size. On a very busy website I see ~50K-60K distinct useragents per day and ~10K per hour. So in my opinion a cache size of 5K-10K elements is a good choice.\nLimiting to only certain fields In some scenarios you only want a specific field and all others are unwanted. This can be achieved by creating the analyzer in Java like this:\nUserAgentAnalyzer uaa; uaa = UserAgentAnalyzer .newBuilder() .withField(\u0026quot;DeviceClass\u0026quot;) .withField(\u0026quot;AgentNameVersionMajor\u0026quot;) .build();  One important effect is that this speeds up the system because it will kick any rules that do not help in getting the desired fields. The above example showed an approximate 40% speed increase (i.e. times dropped from ~1ms to ~0.6ms).\nDo note that some fields need other fields as input (i.e. intermediate result). For example the DeviceBrand also needs the AgentInformationEmail and AgentInformationUrl because in some cases the actual brand is derived from for example the domainname that usually is present in those. So if you only ask for the DomainBrand you will get those fields also.\nIn the nl.basjes.parse.useragent.UserAgent many (not all!!) of the provided variables are provided as a constant String. You can choose to use these and avoid subtle typos in the requested attribute names.\nuaa = UserAgentAnalyzer .newBuilder() .withField(DEVICE_CLASS) .withField(AGENT_NAME_VERSION_MAJOR) .build();  Building your project with -Xlint:all If you are trying to get rid of all possible problems in your application and set the compiler flag -Xlint:all you will see warnings relating to the Kryo serialization system.\n[WARNING] COMPILATION WARNING : [INFO] ------------------------------------------------------------- [WARNING] Cannot find annotation method 'value()' in type 'com.esotericsoftware.kryo.DefaultSerializer': class file for com.esotericsoftware.kryo.DefaultSerializer not found [WARNING] Cannot find annotation method 'value()' in type 'com.esotericsoftware.kryo.DefaultSerializer' [INFO] 2 warnings  The Yauaa analyzer has been prepared in such a way that it can be serialized using both the standard Java serialization and the Kryo serialization library. The Kryo library has been configured as a \u0026ldquo;provided\u0026rdquo; dependency because many do not need it, and (to avoid version conflicts) those who do need it have this dependency already.\nIf your project does not use Kryo and you have this warning then there are several ways to work around this:\n Disable the Xlint check that triggers this warning. Apparently this is the \u0026ldquo;classfile\u0026rdquo; so try to use -Xlint:all,-classfile instead. Add the otherwise needless Kryo library as a \u0026ldquo;provided\u0026rdquo; dependency to your project.  \u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;com.esotericsoftware\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;kryo\u0026lt;/artifactId\u0026gt;  \u0026lt;version\u0026gt;5.2.1\u0026lt;/version\u0026gt;  \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; IMPORTANT: This library is single threaded ! Because the internal analyzer code is not reentrant the main method has been synchronized on the instance. So from the perspective of you the application developer this library is thread safe.\nIf you are in a multi threaded situation you should create a separate instance per thread or accept the speed limitation of the shared synchronized instance.\nNote that you should really instantiate it only once per thread (and use a ThreadPool or something similar) because starting a new instance takes several seconds.\nEclipse users Be aware of there is a bug in Eclipse which will show you errors in perfectly valid Java code: https://bugs.eclipse.org/bugs/show_bug.cgi?id=527475 The errors you see are related to the inheritance model used by the Builders in this project and the fact that Eclipse does not interpret it correctly.\nScala usage When using this library from a Scala application the way the Builders have been constructed turns out to be very unfriendly to use.\nStarting with Yauaa version 5.14 the rewritten builders (contributed by Robert Stoll) will become available which will make it a lot easier for Scala users to use:\nval uaa = UserAgentAnalyzer.newBuilder .withCache(10000) .hideMatcherLoadStats .withField(\u0026quot;DeviceClass\u0026quot;) .build  Snapshots Occasionally I publish a snapshot version. If you want to use such a version then the repository can be configured in your maven with something like this\n\u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;sonatype-oss-snapshots\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;Sonatype OSS Snapshots\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;https://oss.sonatype.org/content/repositories/snapshots\u0026lt;/url\u0026gt; \u0026lt;releases\u0026gt;\u0026lt;enabled\u0026gt;false\u0026lt;/enabled\u0026gt;\u0026lt;/releases\u0026gt; \u0026lt;snapshots\u0026gt;\u0026lt;enabled\u0026gt;true\u0026lt;/enabled\u0026gt;\u0026lt;/snapshots\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt;  "},{"uri":"/expect/limitations/","title":"Limitations","tags":[],"description":"","content":"It only analyzes the provided string This system is based on analyzing the useragent string and looking for the patterns in the useragent string as they have been defined by parties like Google, Microsoft, Samsung and many others. These have been augmented with observations how developers apparently do things. There are really no (ok, very limited) lookup tables that define if a certain device name is a Phone or a Tablet. This makes this system very maintainable because there is no need to have a list of all possible devices.\nAs a consequence if a useragent does not follow these patterns the analysis will yield the \u0026lsquo;wrong\u0026rsquo; answer. Take for example these two (both were found exactly as shown here in the logs of a live website):\nMozilla/5.0 (Linux; Android 5.1; SAMSUNG-T805s Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.94 Mobile Safari/537.36 Mozilla/5.0 (Linux; Android 4.4.2; SAMSUNG-T805S Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.89 Safari/537.36  The difference between \u0026ldquo;Mobile Safari\u0026rdquo; and \u0026ldquo;Safari\u0026rdquo; has been defined for Google Chrome as the difference between \u0026ldquo;Phone\u0026rdquo; and \u0026ldquo;Tablet\u0026rdquo; (see the Chrome documentation on this).\nAnd as you can see in this example: we sometimes get it wrong. The impact in this case is however very limited: Of the 445 visitors I found using this device only 2 were classified wrong all others were correct.\nA second example is when the Samsung Browser is installed on a non-Samsung device (in this example a Google Nexus 6):\nMozilla/5.0 (Linux; Android 7.0; SAMSUNG Nexus 6 Build/NBD92G) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/5.4 Chrome/51.0.2704.106 Mobile Safari/537.36  As you can see this browser assumes it is only installed on Samsung devices so they \u0026lsquo;force\u0026rsquo; the word Samsung in there. In this case you will see this being reported as a \u0026ldquo;Samsung Nexus 6\u0026rdquo;, which is obviously wrong.\nDevice Name and Device Brand The detection of the brand and name of the device are the most brittle and unreliable part of the output.\nThere are a few reasons for this:\n There are a LOT of different devices from a LOT of vendors. To give you an impression; In november 2018 I did a count on the index page of DeviceAtlas and found over 4100 brands and a total of over 55000 different devices. In most cases the useragent string ONLY include the model of the device and NOT the brand. So you need to be able to determine JUST from the model what brand it was. This system tries to limit the number of lookup tables and rely on patterns as much as possible. As a consequence I really do not want to have a complete list of all devices in here. So what are the patterns in the mapping from model to brand? I did an analysis on some of these brands and found that Acer, Lenovo, LG and QMobile all have a device called \u0026lsquo;A200\u0026rsquo;. So if the useragent only contains \u0026lsquo;A200\u0026rsquo; there is no way to determine what device it really was.  So as a consequence I have chosen to limit this detection to\n Brands that are included as the first word in the appropriate field. Special cases (like robots) The \u0026ldquo;most used brands\u0026rdquo; as good as possible.  WARNING: The detection of DeviceBrand will therefore never be complete and accurate.\n"},{"uri":"/developer/makingnewrules/","title":"Making new rules","tags":[],"description":"","content":"Detecting new useragent patterns When you find a useragent for which one or more of the fields are wrong there is the need to change the patterns and rules that are used by this system for classifying these attributes. In order to write rules this first described how the system works and what tools have been created to make writing new rules easier.\nBase problem: They all lie When looking at useragents it is clear that almost all of them include the name of predecessors/competitors with which they are supposed to be compatible with.\nSo in general there is a ranking in the patterns; some are more true than others.\nSolution overview The way this system solves all of this is by employing several steps:\n The user agent string is parsed into a tree using Antlr4. This tree is matched against a set of \u0026ldquo;Matchers\u0026rdquo; A matcher is  a set of patterns that must be present in the tree a set of field/value combinations with a \u0026lsquo;weight\u0026rsquo; the value can be either a fixed value or a part of the tree.   For all matchers where ALL required patterns were present the field/value/weight results are all combined. For fields where multiple values were present the value with the highest weight \u0026lsquo;wins\u0026rsquo;  All matchers are with tests placed in yaml files in the UserAgents directory. Because of the system with the weights the order of the matchers is not checked or guaranteed in any way. So if the two matchers may set the same field to a different value then better make sure they have different weights.\nThe anatomy of a matcher A matcher consists of 3 parts require extract options\nThe \u0026ldquo;require\u0026rdquo; part holds the patterns that must all result in a non-null value. The IsNull operator is intended to check that a specific value actually IS null. The \u0026ldquo;extract\u0026rdquo; part is to send either a fixed string or an extracted pattern into a field with a certain numerical confidence.\nThere are a few possible option flags:\ninit This means the init output for this matcher must be shown. This is the same effect when running it without any extract values verbose This means that a LOT of debug output will be shown in the output. only This means that ONLY this test must be run. No others.\nOnly IFF all require AND all extract patterns yielded a non-null value then will all of the extracted values be added to the end result. In general a field will receive a value from multiple matchers; the value with the highest confidence value will be in the output.\nThe overall structure is this:\nconfig: - lookup:  name: \u0026#39;lookupname\u0026#39;  map:  \u0026#34;From1\u0026#34; : \u0026#34;To1\u0026#34;  \u0026#34;From2\u0026#34; : \u0026#34;To2\u0026#34;  \u0026#34;From3\u0026#34; : \u0026#34;To3\u0026#34;  - set:  name: \u0026#39;setname\u0026#39;  merge:  - \u0026#39;nameOtherSet\u0026#39;  - \u0026#39;nameOtherLookup\u0026#39;  values:  - \u0026#39;foo\u0026#39;  - \u0026#39;bar\u0026#39;  - matcher:  options:  - \u0026#39;verbose\u0026#39;  variable:  - \u0026#39;VariableName : Extract pattern\u0026#39;  - \u0026#39;VariableName : Extract pattern\u0026#39;  require:  - \u0026#39;Require pattern\u0026#39;  - \u0026#39;Require pattern\u0026#39;  extract:  - \u0026#39;FieldName : Confidence : Extract pattern\u0026#39;  - \u0026#39;FieldName : Confidence : Extract pattern\u0026#39;  - test:  options:  - \u0026#39;verbose\u0026#39;  - \u0026#39;init\u0026#39;  input:  user_agent_string: \u0026#39;Useragent\u0026#39;  expected:  FieldName1 : \u0026#39;ExpectedValue1\u0026#39;  FieldName2 : \u0026#39;ExpectedValue2\u0026#39;  FieldName3 : \u0026#39;ExpectedValue3\u0026#39; A require pattern must simply yield a non-null value. The IsNull operator only makes sense in the context of a require as with this you can check that a pattern may not exist.\nFor example to do checks like \u0026ldquo;The last product in the list must be named foo\u0026rdquo; you can write this\n- matcher:  require:  - \u0026#39;IsNull[agent.product.name=\u0026#34;foo\u0026#34;^\u0026gt;]\u0026#39; An extract pattern is either a fixed string \u0026ldquo;foo\u0026rdquo; or a path expression as explained later in this document.\nWhere the rules are located Under the main resources there is a folder called UserAgents . In the folder a collection of yaml files are located. Each of those files contains matchers, lookups, tests or any combination of them in any order. This means that in many cases you\u0026rsquo;ll find a relevant test case close to the rules.\nUseragent parse tree model According to RFC-2616 a useragent consists of set of products. Each with an (optional) version and an (optional) comment block.\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.8 https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43\nAfter much analysis the model that this parser uses it as follows:\nThe whole string (the \u0026lsquo;agent\u0026rsquo;) is mostly cut into \u0026lsquo;product\u0026rsquo; and \u0026rsquo;text\u0026rsquo; parts. Each child node in the tree is numbered (1,2,3,\u0026hellip;) within the context of the parent. A product has zero or more \u0026lsquo;version\u0026rsquo; fields and zero or more \u0026lsquo;comments\u0026rsquo; fields. Each comments\u0026rsquo; has one or more \u0026rsquo;entry\u0026rsquo;: In a comment block like this \u0026lsquo;foo/1.0 (one; two three; four)\u0026rsquo; we will have 3 entries (they are ; separated).\nFrom there the system recurses down within limitations.\nFlattened form of the tree If we take this useragent as an example the tree is flattened into a set of \u0026lsquo;breadcrumb\u0026rsquo; type paths.\nI put some spaces in various places so you can see what happens with those (in most places they are trimmed):\nfoo/1.0 ( one ; two three; four ) bar/2.0 (five;six seven) will result in these paths (with their textual value)\nagent=\u0026#34;foo/1.0 ( one ; two three; four ) bar/2.0 (five;six seven)\u0026#34; agent.(1)product=\u0026#34;foo/1.0 ( one ; two three; four )\u0026#34; agent.(1)product[1-1]=\u0026#34;foo\u0026#34; agent.(1)product[1-2]=\u0026#34;foo/1\u0026#34; agent.(1)product[2-2]=\u0026#34;1\u0026#34; agent.(1)product[1-3]=\u0026#34;foo/1.0\u0026#34; agent.(1)product[3-3]=\u0026#34;0\u0026#34; agent.(1)product.(1)name=\u0026#34;foo\u0026#34; agent.(1)product.(1)name[1-1]=\u0026#34;foo\u0026#34; agent.(1)product.(1)version=\u0026#34;1.0\u0026#34; agent.(1)product.(1)version[1-1]=\u0026#34;1\u0026#34; agent.(1)product.(1)version[1-2]=\u0026#34;1.0\u0026#34; agent.(1)product.(1)version[2-2]=\u0026#34;0\u0026#34; agent.(1)product.(1)comments=\u0026#34;( one ; two three; four )\u0026#34; agent.(1)product.(1)comments.(1)entry=\u0026#34;one\u0026#34; agent.(1)product.(1)comments.(1)entry[1-1]=\u0026#34;one\u0026#34; agent.(1)product.(1)comments.(1)entry.(1)text=\u0026#34;one\u0026#34; agent.(1)product.(1)comments.(1)entry.(1)text[1-1]=\u0026#34;one\u0026#34; agent.(1)product.(1)comments.(2)entry=\u0026#34;two three\u0026#34; agent.(1)product.(1)comments.(2)entry[1-1]=\u0026#34;two\u0026#34; agent.(1)product.(1)comments.(2)entry[1-2]=\u0026#34;two three\u0026#34; agent.(1)product.(1)comments.(2)entry[2-2]=\u0026#34;three\u0026#34; agent.(1)product.(1)comments.(2)entry.(1)text=\u0026#34;two three\u0026#34; agent.(1)product.(1)comments.(2)entry.(1)text[1-1]=\u0026#34;two\u0026#34; agent.(1)product.(1)comments.(2)entry.(1)text[1-2]=\u0026#34;two three\u0026#34; agent.(1)product.(1)comments.(2)entry.(1)text[2-2]=\u0026#34;three\u0026#34; agent.(1)product.(1)comments.(3)entry=\u0026#34;four\u0026#34; agent.(1)product.(1)comments.(3)entry[1-1]=\u0026#34;four\u0026#34; agent.(1)product.(1)comments.(3)entry.(1)text=\u0026#34;four\u0026#34; agent.(1)product.(1)comments.(3)entry.(1)text[1-1]=\u0026#34;four\u0026#34; agent.(2)product=\u0026#34;bar/2.0 (five;six seven)\u0026#34; agent.(2)product[1-1]=\u0026#34;bar\u0026#34; agent.(2)product[1-2]=\u0026#34;bar/2\u0026#34; agent.(2)product[2-2]=\u0026#34;2\u0026#34; agent.(2)product[1-3]=\u0026#34;bar/2.0\u0026#34; agent.(2)product[3-3]=\u0026#34;0\u0026#34; agent.(2)product.(1)name=\u0026#34;bar\u0026#34; agent.(2)product.(1)name[1-1]=\u0026#34;bar\u0026#34; agent.(2)product.(1)version=\u0026#34;2.0\u0026#34; agent.(2)product.(1)version[1-1]=\u0026#34;2\u0026#34; agent.(2)product.(1)version[1-2]=\u0026#34;2.0\u0026#34; agent.(2)product.(1)version[2-2]=\u0026#34;0\u0026#34; agent.(2)product.(1)comments=\u0026#34;(five;six seven)\u0026#34; agent.(2)product.(1)comments.(1)entry=\u0026#34;five\u0026#34; agent.(2)product.(1)comments.(1)entry[1-1]=\u0026#34;five\u0026#34; agent.(2)product.(1)comments.(1)entry.(1)text=\u0026#34;five\u0026#34; agent.(2)product.(1)comments.(1)entry.(1)text[1-1]=\u0026#34;five\u0026#34; agent.(2)product.(1)comments.(2)entry=\u0026#34;six seven\u0026#34; agent.(2)product.(1)comments.(2)entry[1-1]=\u0026#34;six\u0026#34; agent.(2)product.(1)comments.(2)entry[1-2]=\u0026#34;six seven\u0026#34; agent.(2)product.(1)comments.(2)entry[2-2]=\u0026#34;seven\u0026#34; agent.(2)product.(1)comments.(2)entry.(1)text=\u0026#34;six seven\u0026#34; agent.(2)product.(1)comments.(2)entry.(1)text[1-1]=\u0026#34;six\u0026#34; agent.(2)product.(1)comments.(2)entry.(1)text[1-2]=\u0026#34;six seven\u0026#34; agent.(2)product.(1)comments.(2)entry.(1)text[2-2]=\u0026#34;seven\u0026#34; As you can see there are a few special operators that allow comparing and extracting specific words.\nWalking around the tree In many cases we want to get the version of the product with a specific name. This means we should look to the product with that name and from there go \u0026lsquo;up\u0026rsquo; to the product and from there select the \u0026lsquo;version\u0026rsquo;.\nFor this purpose a special language has been created that allows walking through a tree from the point where a match was found and do additional compare and string manipulation actions to obtain the value we are looking for.\nThis language also supports lookups (hashmaps) that do a case INsensitive lookup.\nNote that for finding a matching pattern the system will recurse through the parse tree from left to right. The FIRST matching pattern is used for the end result.\nFor demonstrating the operators I\u0026rsquo;m using this user agent to explain the effects:\nfoo faa/1.0 2.3 (one; two three four) bar baz/2.0 3.0 (five; six seven) Available operators:\nWalking around the tree\n   Operation Symbol Example Result value (if applicable)     Up to parent ^ agent.(1)product.name^ agent.(1)product   Next Sibling \u0026gt; agent.(1)product\u0026gt; agent.(2)product   Previous Sibling \u0026lt; agent.(2)product\u0026lt; agent.(1)product   Down to child .name agent.(1)product.version    Down to specific child .(2)version agent.(1)product.(2)version    Down to specific child range .(2-3)version agent.(1)product.(2-3)version    Down to specific child range .(2-)version agent.(1)product.(2-)version    Down to specific child range .(-5)version agent.(1)product.(-5)version     Comparing values in the tree\n   Operation Symbol Example Result value (if applicable) Explain     Equals = agent.(1)product.version=\u0026ldquo;2.3\u0026rdquo; agent.(1)product.(2)version The second version is \u0026ldquo;2.3\u0026rdquo;   Not equals != agent.(1)product.version!=\u0026ldquo;1.0\u0026rdquo; agent.(1)product.(2)version The second version is the first one when backtracking that is not \u0026ldquo;1.0\u0026rdquo;   Contains ~ agent.product.name~\u0026ldquo;ar\u0026rdquo; agent.(2)product.(1)name=\u0026ldquo;bar baz\u0026rdquo; The first product name when backtracking that contains \u0026ldquo;ar\u0026rdquo;   Starts with { agent.product.name{\u0026ldquo;b\u0026rdquo; agent.(2)product.(1)name=\u0026ldquo;bar baz\u0026rdquo; The first product name when backtracking that starts with \u0026ldquo;b\u0026rdquo;   Ends with } agent.product.name}\u0026ldquo;z\u0026rdquo; agent.(2)product.(1)name=\u0026ldquo;bar baz\u0026rdquo; The first product name when backtracking that ends with \u0026ldquo;z\u0026rdquo;   (Key)set contains ? agent.product.name?mySetOfValues agent.(3)product.(1)name The name of the third product was present in the defined set of values. This set may be a \u0026ldquo;set\u0026rdquo; or a \u0026ldquo;lookup\u0026rdquo; in the last case only the keys of this lookup will be evaluated   (Key)set does NOT contain ?! agent.product.name?!mySetOfValues agent.(3)product.(1)name The name of the third product was NOT present in the defined set of values. This set may be a \u0026ldquo;set\u0026rdquo; or a \u0026ldquo;lookup\u0026rdquo; in the last case only the keys of this lookup will be evaluated    Extracting substrings\nNote this fact agent.(1)product.(1)comments.(2)entry.(1)text=\u0026ldquo;one two three four five\u0026rdquo;\n   Operation Symbol Example Value     First N Words [-N] agent.(1)product.(1)comments.(2)entry.(1)text[-3] one two three   Single Word at position N [N] agent.(1)product.(1)comments.(2)entry.(1)text[3] three   A range of words N-M [N-M] agent.(1)product.(1)comments.(2)entry.(1)text[2-4] two three four   All words to the end starting at N [N-] agent.(1)product.(1)comments.(2)entry.(1)text[3-] three four five   Back to full value @ agent.(1)product.(1)comments.(2)entry.(1)text[2]=\u0026ldquo;three\u0026rdquo; agent.(1)product.(1)comments.(2)entry.(1)text[2]=\u0026ldquo;three\u0026rdquo;@ three one two three four five    Special operations\n   Operation Symbol Example Result value (if applicable)     Check if the expresssion resulted in a null \u0026rsquo;no match\u0026rsquo; value. IsNull[expression] IsNull[agent.(1)product.(3)name] true   Return the result or the provided default value in case the expression was a null \u0026rsquo;no match\u0026rsquo; value. DefaultIfNull[expression;defaultvalue] DefaultIfNull[agent.(1)product.(3)name;\u0026ldquo;Something\u0026rdquo;]    Cleanup the version from an _ separated to a . separated string CleanVersion[expression] CleanVersion[\u0026ldquo;1_2_3\u0026rdquo;] 1.2.3   Replace every occurrence of a String with another String (fixed text and case sensitive!) ReplaceString[expression;search;replace] ReplaceString[\u0026ldquo;onefoofootwo\u0026rdquo;;\u0026ldquo;foo\u0026rdquo;;\u0026ldquo;bar\u0026rdquo;] onebarbartwo   LookUp the value against a lookup table LookUp[lookupname;expression] LookUp[OSNames;agent.product.entry.text]    LookUp the value against a lookup table (with fallback in case no match) LookUp[lookupname;expression;defaultvalue] LookUp[OSNames;agent.product.entry.text;\u0026ldquo;Unknown\u0026rdquo;]    LookUp the value against a lookup table and return the original value if a matching prefix is present. IsInLookUp[lookupname;expression] IsInLookUp[OSNames;agent.product.entry.text]    LookUp the lookupname in the lookup table that the value contains LookUpContains[lookupname;expression] LookUpContains[OSNames;agent.product.entry.text]    LookUp the lookupname in the lookup table that the value contains (with fallback in case no match) LookUpContains[lookupname;expression;defaultvalue] LookUpContains[OSNames;agent.product.entry.text;\u0026ldquo;Unknown\u0026rdquo;]    LookUp the lookupname in the lookup table that the value contains and return the original value if a matching prefix is present. IsInLookUpContains[lookupname;expression] IsInLookUpContains[OSNames;agent.product.entry.text]    LookUp the lookupname in the lookup table that the value contains and return the original value if a matching prefix is NOT present. IsNotInLookUpContains[lookupname;expression] IsNotInLookUpContains[OSNames;agent.product.entry.text]    LookUp the value against a lookup table and return the value where the key is the longest matching prefix of the value. LookUpPrefix[lookupname;expression] LookUpPrefix[OSNames;agent.product.entry.text]    LookUp the value against a lookup table and return the value where the key is the longest matching prefix of the value (with fallback in case no match). LookUpPrefix[lookupname;expression;defaultvalue] LookUpPrefix[OSNames;agent.product.entry.text;\u0026ldquo;Unknown\u0026rdquo;]    LookUp the value against a lookup table and return the value if there is NO matching prefix of the key. LookUpIsNotInPrefix[lookupname;expression] LookUpIsNotInPrefix[OSNames;agent.product.entry.text]    LookUp the value against a lookup table and return the original value if a matching prefix is present. IsInLookUpPrefix[lookupname;expression] IsInLookUpPrefix[OSNames;agent.product.entry.text]    Put a fixed string before an expression Concat[value;expression] Concat[\u0026ldquo;Something\u0026rdquo;;agent.product.entry.text]    Put a fixed string after an expression Concat[expression;value] Concat[agent.product.entry.text;\u0026ldquo;Something\u0026rdquo;]    Surround the expression with both a prefix and a postfix Concat[value;expression;value] Concat[\u0026ldquo;Something\u0026rdquo;;agent.product.entry.text;\u0026ldquo;Something\u0026rdquo;]     Chaining operators An extensive example of walking around to get the right value.\nfoo faa/1.0/2.3 (one; two three four) bar baz/2.0/3.0 (five; six seven)    Expression Current path Value     agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo; agent.(2)product.(1)comments.(2)entry.(1)text[2] seven   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^ agent.(2)product.(1)comments.(2)entry six seven   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^^ agent.(2)product.(1)comments (five; six seven)   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^^^ agent.(2)product bar baz/2.0/3.0 (five; six seven)   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^^^\u0026lt; agent.(1)product foo faa/1.0/2.3 (one; two three four)   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^^^\u0026lt;.name agent.(1)product.(1)name foo faa   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^^^\u0026lt;.name=\u0026ldquo;foo faa\u0026rdquo; agent.(1)product.(1)name foo faa   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^^^\u0026lt;.name=\u0026ldquo;foo faa\u0026rdquo;^ agent.(1)product foo faa/1.0/2.3 (one; two three four)   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^^^\u0026lt;.name=\u0026ldquo;foo faa\u0026rdquo;^.comments agent.(1)product.(1)comments (one; two three four)   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^^^\u0026lt;.name=\u0026ldquo;foo faa\u0026rdquo;^.comments.entry agent.(1)product.(1)comments.(1)entry one   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^^^\u0026lt;.name=\u0026ldquo;foo faa\u0026rdquo;^.comments.entry.text[2]=\u0026ldquo;three\u0026rdquo; agent.(1)product.(1)comments.(2)entry[2] three   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^^^\u0026lt;.name=\u0026ldquo;foo faa\u0026rdquo;^.comments.entry.text[2]=\u0026ldquo;three\u0026rdquo;@ agent.(1)product.(1)comments.(2)entry two three four   agent.product.(1)comments.entry.(1)text[2]=\u0026ldquo;seven\u0026rdquo;^^^\u0026lt;.name=\u0026ldquo;foo faa\u0026rdquo;^.comments.entry.text[2]=\u0026ldquo;three\u0026rdquo;@[1] agent.(1)product.(1)comments.(2)entry[1] two    Note that the first possible match is returned. If a child sibling or check fails the backtracking continues until the entire parse tree has been examined.\nI created a test that shows all of the debug output of this example: unit test and yaml file\nThis can also be run from the commandline using:\nmvn -Dtest=DocumentationExample -DfailIfNoTests=false test Creating a new rule Assume we got this useragent\nMozilla/5.0 (compatible; Foo/3.1; Bar) and let\u0026rsquo;s just assume we want to set a field called MinorFooVersion if the minor version of Foo is 1\nTo start we put the agent as a new test in one of the yaml files. If we choose to create a new file make sure is starts with \u0026ldquo;config:\u0026rdquo;\n- test:  input:  user_agent_string: \u0026#39;Mozilla/5.0 (compatible; Foo/3.1; Bar)\u0026#39; Now we run the unit test \u0026ldquo;TestPredefinedBrowsers\u0026rdquo;. On a normal computer this will take only about 1-5 seconds.\nThe output contains all the field values for this useragent in the exact form of a unit test.\nSo once you are happy with the result you can simply copy and past this into the yaml file.\nIn this case is looks something like this:\n- test: # options: # - \u0026#39;verbose\u0026#39; # - \u0026#39;init\u0026#39; # - \u0026#39;only\u0026#39;  input:  user_agent_string: \u0026#39;Mozilla/5.0 (compatible; Foo/3.1; Bar)\u0026#39;  expected:  DeviceClass : \u0026#39;Unknown\u0026#39;  DeviceName : \u0026#39;Unknown\u0026#39;  OperatingSystemClass : \u0026#39;Unknown\u0026#39;  OperatingSystemName : \u0026#39;Unknown\u0026#39;  OperatingSystemVersion : \u0026#39;??\u0026#39;  LayoutEngineClass : \u0026#39;Browser\u0026#39;  LayoutEngineName : \u0026#39;Mozilla\u0026#39;  LayoutEngineVersion : \u0026#39;5.0\u0026#39;  LayoutEngineVersionMajor : \u0026#39;5\u0026#39;  LayoutEngineNameVersion : \u0026#39;Mozilla 5.0\u0026#39;  LayoutEngineNameVersionMajor : \u0026#39;Mozilla 5\u0026#39;  AgentClass : \u0026#39;Browser\u0026#39;  AgentName : \u0026#39;Foo\u0026#39;  AgentVersion : \u0026#39;3.1\u0026#39;  AgentVersionMajor : \u0026#39;3\u0026#39;  AgentNameVersion : \u0026#39;Foo 3.1\u0026#39;  AgentNameVersionMajor : \u0026#39;Foo 3\u0026#39; The output also contains all hard checked paths in the tree in the rough form of a matcher.\n- matcher: # options: # - \u0026#39;verbose\u0026#39;  require: # - \u0026#39;__SyntaxError__=\u0026#34;false\u0026#34;\u0026#39; # - \u0026#39;agent=\u0026#34;Mozilla/5.0 (compatible; Foo/3.1; Bar)\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product=\u0026#34;Mozilla/5.0 (compatible; Foo/3.1; Bar)\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product[1-1]=\u0026#34;Mozilla\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product[1-2]=\u0026#34;Mozilla/5\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product[2-2]=\u0026#34;5\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product[1-3]=\u0026#34;Mozilla/5.0\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product[3-3]=\u0026#34;0\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)name=\u0026#34;Mozilla\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)name[1-1]=\u0026#34;Mozilla\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)version=\u0026#34;5.0\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)version[1-1]=\u0026#34;5\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)version[1-2]=\u0026#34;5.0\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)version[2-2]=\u0026#34;0\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments=\u0026#34;(compatible; Foo/3.1; Bar)\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(1)entry=\u0026#34;compatible\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(1)entry[1-1]=\u0026#34;compatible\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(1)entry.(1)text=\u0026#34;compatible\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(1)entry.(1)text[1-1]=\u0026#34;compatible\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry=\u0026#34;Foo/3.1\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry[1-1]=\u0026#34;Foo\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry[1-2]=\u0026#34;Foo/3\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry[2-2]=\u0026#34;3\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry[1-3]=\u0026#34;Foo/3.1\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry[3-3]=\u0026#34;1\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product=\u0026#34;Foo/3.1\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product[1-1]=\u0026#34;Foo\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product[1-2]=\u0026#34;Foo/3\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product[2-2]=\u0026#34;3\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product[1-3]=\u0026#34;Foo/3.1\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product[3-3]=\u0026#34;1\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product.(1)name=\u0026#34;Foo\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product.(1)name[1-1]=\u0026#34;Foo\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product.(1)version=\u0026#34;3.1\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product.(1)version[1-1]=\u0026#34;3\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product.(1)version[1-2]=\u0026#34;3.1\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(2)entry.(1)product.(1)version[2-2]=\u0026#34;1\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(3)entry=\u0026#34;Bar\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(3)entry[1-1]=\u0026#34;Bar\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(3)entry.(1)text=\u0026#34;Bar\u0026#34;\u0026#39; # - \u0026#39;agent.(1)product.(1)comments.(3)entry.(1)text[1-1]=\u0026#34;Bar\u0026#34;\u0026#39;  extract: # - \u0026#39;DeviceClass : 1:\u0026#39; # - \u0026#39;DeviceBrand : 1:\u0026#39; # - \u0026#39;DeviceName : 1:\u0026#39; # - \u0026#39;OperatingSystemClass : 1:\u0026#39; # - \u0026#39;OperatingSystemName : 1:\u0026#39; # - \u0026#39;OperatingSystemVersion: 1:\u0026#39; # - \u0026#39;LayoutEngineClass : 1:\u0026#39; # - \u0026#39;LayoutEngineName : 1:\u0026#39; # - \u0026#39;LayoutEngineVersion : 1:\u0026#39; # - \u0026#39;AgentClass : 1:\u0026#39; # - \u0026#39;AgentName : 1:\u0026#39; # - \u0026#39;AgentVersion : 1:\u0026#39; In our case we are only interested in the second digit of the version of the product named \u0026ldquo;Foo\u0026rdquo;\nSo we copy this and make it like this:\n- matcher:  extract:  - \u0026#39;MinorFooVersion : 1:agent.(1)product.(1)comments.entry.(1)product.(1)name=\u0026#34;Foo\u0026#34;^.version[2]\u0026#39; What this does is that in the first product, in the first set of comments there is at any position an entry that contains as the first element a product who\u0026rsquo;s name is \u0026ldquo;Foo\u0026rdquo; that we go up in the tree and then down to the version of that product and then take the second word.\nNow if we run the unit test again we will see this:\n- test: # options: # - \u0026#39;verbose\u0026#39; # - \u0026#39;init\u0026#39; # - \u0026#39;only\u0026#39;  input:  user_agent_string: \u0026#39;Mozilla/5.0 (compatible; Foo/3.1; Bar)\u0026#39;  expected:  DeviceClass : \u0026#39;Unknown\u0026#39;  DeviceName : \u0026#39;Unknown\u0026#39;  OperatingSystemClass : \u0026#39;Unknown\u0026#39;  OperatingSystemName : \u0026#39;Unknown\u0026#39;  OperatingSystemVersion : \u0026#39;??\u0026#39;  LayoutEngineClass : \u0026#39;Browser\u0026#39;  LayoutEngineName : \u0026#39;Mozilla\u0026#39;  LayoutEngineVersion : \u0026#39;5.0\u0026#39;  LayoutEngineVersionMajor : \u0026#39;5\u0026#39;  LayoutEngineNameVersion : \u0026#39;Mozilla 5.0\u0026#39;  LayoutEngineNameVersionMajor : \u0026#39;Mozilla 5\u0026#39;  AgentClass : \u0026#39;Browser\u0026#39;  AgentName : \u0026#39;Foo\u0026#39;  AgentVersion : \u0026#39;3.1\u0026#39;  AgentVersionMajor : \u0026#39;3\u0026#39;  AgentNameVersion : \u0026#39;Foo 3.1\u0026#39;  AgentNameVersionMajor : \u0026#39;Foo 3\u0026#39;  MinorFooVersion : \u0026#39;1\u0026#39; As you can see this clearly shows that a new field has been added with the value we wanted.\nIf you want to change or add more rules then simply iterate over the steps until you have the end result you think is good. Then simply copy the end \u0026rsquo;test\u0026rsquo; into the yaml file and save.\nIf you are detecting a new field or a new value for an existing field then be aware that this may also apply to tests that are already present in the system. For all tests to pass these must be updated also.\nYou can choose to use this in a more \u0026ldquo;Test Driven Development\u0026rdquo; model also. Simply run the unit test, copy the \u0026lsquo;raw testcase\u0026rsquo; into the yaml file and edit the values to what they should be and work from there.\nIf you run it this way your will get a \u0026lsquo;failed test\u0026rsquo; which yields a bit of extra output. For the sake of demo if I simply put this testcase in the yaml file\n- test:  input:  user_agent_string: \u0026#39;Mozilla/5.0 (compatible; Foo/3.1; Bar)\u0026#39;  expected:  AgentClass : \u0026#39;Browser\u0026#39;  AgentName : \u0026#39;Foo\u0026#39;  AgentVersion : \u0026#39;3.1\u0026#39;  AgentVersionMajor : \u0026#39;3\u0026#39;  AgentNameVersion : \u0026#39;Foo 3.1\u0026#39;  AgentNameVersionMajor : \u0026#39;Foo 3\u0026#39;  MinorFooVersion : \u0026#39;1\u0026#39; This would also show as test output:\n [INFO ] AbstractUserAgentAnalyzerTester : 89: +--------+------------------------------+-------------+---------+------------+------------+ [INFO ] AbstractUserAgentAnalyzerTester : 89: | Result | Field | Actual | Default | Confidence | Expected | [INFO ] AbstractUserAgentAnalyzerTester : 89: +--------+------------------------------+-------------+---------+------------+------------+ [ERROR] AbstractUserAgentAnalyzerTester : 109: | -FAIL- | LayoutEngineClass | Browser | | 3 | \u0026lt;\u0026lt;absent\u0026gt;\u0026gt; | [ERROR] AbstractUserAgentAnalyzerTester : 109: | -FAIL- | LayoutEngineName | Mozilla | | 3 | \u0026lt;\u0026lt;absent\u0026gt;\u0026gt; | [ERROR] AbstractUserAgentAnalyzerTester : 109: | -FAIL- | LayoutEngineVersion | 5.0 | | 3 | \u0026lt;\u0026lt;absent\u0026gt;\u0026gt; | [ERROR] AbstractUserAgentAnalyzerTester : 109: | -FAIL- | LayoutEngineVersionMajor | 5 | | 3 | \u0026lt;\u0026lt;absent\u0026gt;\u0026gt; | [ERROR] AbstractUserAgentAnalyzerTester : 109: | -FAIL- | LayoutEngineNameVersion | Mozilla 5.0 | | 3 | \u0026lt;\u0026lt;absent\u0026gt;\u0026gt; | [ERROR] AbstractUserAgentAnalyzerTester : 109: | -FAIL- | LayoutEngineNameVersionMajor | Mozilla 5 | | 3 | \u0026lt;\u0026lt;absent\u0026gt;\u0026gt; | [INFO ] AbstractUserAgentAnalyzerTester : 89: | | AgentClass | Browser | | 10 | | [INFO ] AbstractUserAgentAnalyzerTester : 89: | | AgentName | Foo | | 10 | | [INFO ] AbstractUserAgentAnalyzerTester : 89: | | AgentVersion | 3.1 | | 10 | | [INFO ] AbstractUserAgentAnalyzerTester : 89: | | AgentVersionMajor | 3 | | 10 | | [INFO ] AbstractUserAgentAnalyzerTester : 89: | | AgentNameVersion | Foo 3.1 | | 10 | | [INFO ] AbstractUserAgentAnalyzerTester : 89: | | AgentNameVersionMajor | Foo 3 | | 10 | | [ERROR] AbstractUserAgentAnalyzerTester : 109: | -FAIL- | AgentLanguage | Bavarian | | 500006 | \u0026lt;\u0026lt;absent\u0026gt;\u0026gt; | [ERROR] AbstractUserAgentAnalyzerTester : 109: | -FAIL- | AgentLanguageCode | bar | | 500006 | \u0026lt;\u0026lt;absent\u0026gt;\u0026gt; | [ERROR] AbstractUserAgentAnalyzerTester : 109: | -FAIL- | MinorFooVersion | ?? | Default | -1 | 1 | [INFO ] AbstractUserAgentAnalyzerTester : 89: +--------+------------------------------+-------------+---------+------------+------------+ As you can see the system will fail on missing fields, unexpected fields and wrong values.\nIf you create rules that in one of the test cases produce for the same field different values with the same confidence then the test will fail with messages like this:\n- *********************************************************** - *** REALLY IMPORTANT ERRORS IN THE RULESET *** - *** YOU MUST CHANGE THE CONFIDENCE LEVELS OF YOUR RULES *** - *********************************************************** - Found different value for \u0026#34;OperatingSystemName\u0026#34; with SAME confidence 10: \u0026#34;RIM OS\u0026#34; and \u0026#34;BlackBerry\u0026#34; - Found different value for \u0026#34;OperatingSystemName\u0026#34; with SAME confidence 10: \u0026#34;RIM OS\u0026#34; and \u0026#34;BlackBerry\u0026#34; - Found different value for \u0026#34;OperatingSystemName\u0026#34; with SAME confidence 10: \u0026#34;RIM OS\u0026#34; and \u0026#34;BlackBerry\u0026#34; - Found different value for \u0026#34;OperatingSystemVersion\u0026#34; with SAME confidence 10: \u0026#34;RIM OS\u0026#34; and \u0026#34;??\u0026#34; - Found different value for \u0026#34;OperatingSystemVersion\u0026#34; with SAME confidence 10: \u0026#34;RIM OS\u0026#34; and \u0026#34;??\u0026#34; - Found different value for \u0026#34;OperatingSystemVersion\u0026#34; with SAME confidence 10: \u0026#34;RIM OS\u0026#34; and \u0026#34;??\u0026#34; Note that these do not need to be the \u0026lsquo;winning\u0026rsquo; value. The existence of the ambiguity is enough to fail.\nThe Known, the Unknown and the faker In most cases an extract will put a value (Mozilla) into a field with a confidence.\nIn addition to this normal case there are two additional cases that need to be covered:\n  We use the special value \u0026lt;\u0026lt;\u0026lt;null\u0026gt;\u0026gt;\u0026gt; if we do not know the value (i.e. the end result should say Unknown or ??) and we do want the post processing to try and fill the field with an alternative.\n This is then labeled as Default. Example: We do not know the DeviceBrand and as a fall back the hostname in the URL (if any) is used.    We simply use something like Unknown or ?? if we do not know the value (i.e. the end result should say Unknown or ??) and we are sure we do NOT want any post processing to try and find something better.\n This is then labeled as not Default. Example: We do not know the DeviceBrand because it matched the pattern of a GoogleBot immitator and we do not want to see Google as the brand.    Wiping values In some cases a previously defined value needs to be erased with a higher confidence. To achieve this simply set the value to \u0026lt;\u0026lt;\u0026lt;null\u0026gt;\u0026gt;\u0026gt;\nIn addition there is a way to set all variables to a certain value by setting the special value __Set_ALL_Fields__\nBecause the ordering is defined by the confidence numbers you must make sure the confidence of the new values are at least 1 higher than the confidence of the __Set_ALL_Fields__.\nBoth of these can be combined into\nextract: - \u0026#39;__Set_ALL_Fields__ : 99:\u0026#34;\u0026lt;\u0026lt;\u0026lt;null\u0026gt;\u0026gt;\u0026gt;\u0026#34;\u0026#39; Note that ALL fields with a confidence below 99 will be wiped. So the field values you set in this matcher must all be 1 higher than this or it will wipe itself too.\nPerformance considerations Note that in order to optimize the performance the paths that lead directly to a point in the tree are placed in a hashmap for very fast lookup.\nOnly if all \u0026lsquo;direct paths\u0026rsquo; in a matcher are found only then the walking of those rules is attempted.\nSo one of the rules looks like this\n- matcher:  require:  - \u0026#39;agent.product.(1)name=\u0026#34;Chrome\u0026#34;\u0026#39;  - \u0026#39;LookUp[ChromeLayoutEngineName;agent.product.(1)name=\u0026#34;Chrome\u0026#34;^.version[1]]\u0026#39;  - \u0026#39;agent.product.(1)name=\u0026#34;AppleWebKit\u0026#34;^.version[1]=\u0026#34;537\u0026#34;\u0026#39;  - \u0026#39;agent.product.(1)version[1]=\u0026#34;537\u0026#34;\u0026#39; # This is a matching speedup trick  extract:  - \u0026#39;LayoutEngineClass : 1000:\u0026#34;Browser\u0026#34;\u0026#39; - \u0026#39;LayoutEngineName : 1000:\u0026#34;AppleWebKit\u0026#34;\u0026#39; - \u0026#39;LayoutEngineVersion : 1000:agent.product.(1)name=\u0026#34;AppleWebKit\u0026#34;^.version\u0026#39; The agent.product.(1)version[1]=\u0026ldquo;537\u0026rdquo; is found immediately while walking through the parsed tree. So if this one is not present then the other check \u0026ldquo;Is the version of AppleWebKit equals to 537\u0026rdquo; and the lookup are not even attempted. These kinds of tricks will speedup parsing.\nVariables There is the option of predefining a value which is then usable by all rules in a matcher.\nA variable is simply a named point in the tree that is found only once and the reused as-is by the other rules within the same matcher. A variable is also always in essence a \u0026lsquo;require\u0026rsquo;, it must be present for the matcher as a whole to continue. You can only reference a variable by name in a later variable. This is because they are evaluated in the order in which they appear in the definition in the file. The variable name follows a similar pattern as variable names in languages like Java: [a-zA-Z][a-zA-Z0-9]+ When referencing a variable (by means of @name) in an expression you must see it as a point in the tree that happens to have a name.\nThis looks like this:\n- matcher:  variable:  - \u0026#39;Chrome : agent.product.(1)name=\u0026#34;Chrome\u0026#34;\u0026#39;  - \u0026#39;AppleWebKitVersion : agent.product.(1)name=\u0026#34;AppleWebKit\u0026#34;^.version\u0026#39;  require:  - \u0026#39;LookUp[ChromeLayoutEngineName;@Chrome^.version[1]]\u0026#39;  - \u0026#39;@AppleWebKitVersion[1]=\u0026#34;537\u0026#34;\u0026#39;  - \u0026#39;agent.product.(1)version[1]=\u0026#34;537\u0026#34;\u0026#39; # This is a matching speedup trick  extract:  - \u0026#39;LayoutEngineClass : 1000:\u0026#34;Browser\u0026#34;\u0026#39; - \u0026#39;LayoutEngineName : 1000:\u0026#34;AppleWebKit\u0026#34;\u0026#39; - \u0026#39;LayoutEngineVersion : 1000:@AppleWebKitVersion\u0026#39; Note that the backtracking stops when the variable finds its first match. So when defined like this:\nextract: - \u0026#39;Something: 1: agent.product.(1)name=\u0026#34;AppleWebKit\u0026#34;^.version\u0026#39; it may find after backtracking that the 5th product matches\nagent.(5)product.(1)version Yet when defined like this\nvariable: - \u0026#39;productname: agent.product.(1)name\u0026#39; extract: - \u0026#39;Something: 1: @productname=\u0026#34;AppleWebKit\u0026#34;^.version\u0026#39; it will stay at the first product and never find the 5th product at all.\n"},{"uri":"/udf/","title":"User Defined Functions","tags":[],"description":"","content":"Several external computation systems support the concept of a User Defined Function (UDF). A UDF is simply a way of making functionality (in this case the analysis of useragents) available in such a system.\nFor several systems (tools used within bol.com (where I work)) I have written such a UDF which are all part of this project.\n Apache Beam   Apache Beam SQL   Apache Drill   Apache Flink   Apache Flink Table/SQL   Apache Hive   Apache Nifi   Apache Pig   Commandline usage   Elastic LogStash   Elastic Search   LogParser   Snowflake   Snowplow   Trino   "},{"uri":"/developer/","title":"Development","tags":[],"description":"","content":"These pages explain the internals of the system and contains the guidelines on how to extend it with your own rules.\n Building from source   Base Design   Making new rules   Shading dependencies   "},{"uri":"/expect/manipulations/","title":"Manipulations","tags":[],"description":"","content":"Privacy Useragents have had a lot of information about the device and the browser in it. This has been so detailled in the past that there were many situations where the useragents could be used for tracking visitors very reliably.\nReducing/Freezing the UserAgent So a few years ago in several browsers projects started to reduce the level of information in the UserAgent. As a direct consequence the analysis results will become less usefull over time as browsers will start taking away more and more information.\n https://www.chromium.org/updates/ua-reduction https://www.chromestatus.com/feature/5704553745874944  The (Q1 2022) DRAFT proposal of the User-Agent Client Hints is intended to contain the information needed in a cleaner way.\n https://wicg.github.io/ua-client-hints/ https://github.com/WICG/ua-client-hints  At this point in time (Q1 2022):\n This is not a standard yet Not all browsers support this  Chromium based browsers support this. Firefox 97 does not.    Compatibility Also (as I have written a long time ago in this article) the UserAgents set values to show to websites what they are compatible with.\nIn 2021 several browsers stopped updating the version number of the underlying operating system because of compatibility problems with poorly written websites.\nAlso several browsers are reaching version 100 which makes the version 3 digits; which leads to parsing problems if a website expects a 2 digit version.\nThis has led to some testing flags for website builders like chrome://flags/#force-major-version-to-100\n Force major version to 100 in User-Agent\n  Force the Chrome major version in the User-Agent string to 100, which allows testing the 3-digit major version number before the actual M100 release. This flag is only available from M96-M99. – Mac, Windows, Linux, Chrome OS, Android, Fuchsia\n and also chrome://flags/#force-minor-version-to-100\n Force the minor version to 100 in the User-Agent string\n  Force the Chrome minor version in the User-Agent string to 100, which allows testing a 3-digit minor version number. Currently, the minor version is always reported as 0, but due to potential breakage with the upcoming major version 100, this flag allows us to test whether setting the major version in the minor version part of the User-Agent string would be an acceptable alternative. If force-major-version-to-100 is set, then this flag has no effect. See crbug.com/1278459 for details. – Mac, Windows, Linux, Chrome OS, Android, Fuchsia\n Hold on: They are testing if they can set the major version in the minor version position \u0026hellip; to work around broken websites?\nIn Chrome/Edge 99 has actually implemented this flag:\nchrome://flags/#force-major-version-to-minor\n Put major version in minor version position in User-Agent\n  Lock the Microsoft Edge major version in the User-Agent string to 99, and force the major version number to the minor version position. This flag is a backup plan for unexpected site-compatibility breakage with a three digit major version. – Mac, Windows, Linux, Chrome OS, Android, Fuchsia\n So you get the effect:\n Chrome/99.0.1150.25 = Chrome 99 Chrome/99.123.1150.25 = Chrome 123  Don\u0026rsquo;t worry: Yauaa actually detects and handles this and reports the correct version.\nThere is no MacOS 11 Both Chromium (=Chrome, Edge, \u0026hellip;) and Firefox have frozen the version of MacOS X to 10.15(.7) and as a consequence MacOS 11 \u0026hellip; simply does not appear in any of their UserAgents. As a consequence these specific versions are reported as unknown version (??).\nBack ground information:\n Always 10_15_7 since Chrome 90. Always 10.15 since Firefox 87.  There is no Windows 11 in Chromium/Chrome/Edge/\u0026hellip; Microsoft has documented here https://docs.microsoft.com/en-us/microsoft-edge/web-platform/how-to-detect-win11\n There are two approaches for sites to access user agent information:\n User-Agent strings (legacy). User-Agent Client Hints (recommended).  Websites can differentiate between users on Windows 11 and Windows 10 by using User-Agent Client Hints (UA-CH).`\n and\n User-Agent strings won\u0026rsquo;t be updated to differentiate between Windows 11 and Windows 10. We don\u0026rsquo;t recommend using User-Agent strings to retrieve user agent data. Browsers that don\u0026rsquo;t support User-Agent Client Hints won\u0026rsquo;t be able to differentiate between Windows 11 and Windows 10.\n And thus the Chrome UserAgent on Windows 11 looks like this:\n Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36\n Which clealy says: Windows 10.0\nThere is no Windows 11 in Firefox Firefox has an explicit issue called Cap the Windows version in the User-Agent to 10.0..\nTheir code comment clearly describes why\n Cap the reported Windows version to 10.0. This way, Microsoft doesn\u0026rsquo;t get to change Web compat-sensitive values without our veto. The compat-sensitivity keeps going up as 10.0 stays as the current value for longer and longer. If the system-reported version ever changes, we\u0026rsquo;ll be able to take our time to evaluate the Web compat impact instead of having to scamble to react like happened with macOS changing from 10.x to 11.x.\n "},{"uri":"/using/memoryusage/","title":"Memory usage","tags":[],"description":"","content":"The system relies heavily on HashMaps to quickly find the rules that need to be fired.\nSome fields only require a handful of rules where others have a lot of them. This means that it depends on the fields that have been requested how many rules are kept in the system and thus how much memory is used to store the rules in. To get an idea of the relative memory impact of the rules needed for a specific field.\nThis table was constructed by running all testcases against the engine where we only request 1 field. Then after forcing a GC in the JVM we retrieve the memory footprint. The DeviceClass field is always extracted and as such can be seen as the baseline against not having this engine running at all.\nBecause most rules determine several fields there is a lot of overlap in the rules used. If you keep all rules we see that version 5.6 uses about 37 MiB of memory for all rules on top of the rules for the DeviceClass (which is always extracted).\nExtracting everything will currently have a memory impact (without caching!) of about 114 MiB\n   Field Relative Memory usage     DeviceClass (required) 90.8 MiB   DeviceName 10.0 MiB   DeviceBrand 9.1 MiB   DeviceCpu 0.7 MiB   DeviceCpuBits 0.5 MiB   DeviceFirmwareVersion 1.1 MiB   DeviceVersion 0.4 MiB   OperatingSystemClass 1.2 MiB   OperatingSystemName 1.3 MiB   OperatingSystemVersion 1.3 MiB   OperatingSystemVersionMajor 1.5 MiB   OperatingSystemNameVersion 2.0 MiB   OperatingSystemNameVersionMajor 2.2 MiB   OperatingSystemVersionBuild 0.4 MiB   LayoutEngineClass 2.8 MiB   LayoutEngineName 2.8 MiB   LayoutEngineVersion 2.8 MiB   LayoutEngineVersionMajor 3.0 MiB   LayoutEngineNameVersion 3.2 MiB   LayoutEngineNameVersionMajor 3.4 MiB   LayoutEngineBuild 0.6 MiB   AgentClass 5.0 MiB   AgentName 5.2 MiB   AgentVersion 5.1 MiB   AgentVersionMajor 5.3 MiB   AgentNameVersion 5.7 MiB   AgentNameVersionMajor 5.8 MiB   AgentBuild 0.5 MiB   AgentLanguage 0.4 MiB   AgentLanguageCode 0.4 MiB   AgentInformationEmail 0.1 MiB   AgentInformationUrl 0.1 MiB   AgentSecurity 0.2 MiB   AgentUuid 0.3 MiB   WebviewAppName 1.0 MiB   WebviewAppVersion 1.0 MiB   WebviewAppVersionMajor 1.0 MiB   WebviewAppNameVersionMajor 1.1 MiB   FacebookCarrier 0.2 MiB   FacebookDeviceClass 0.2 MiB   FacebookDeviceName 0.2 MiB   FacebookDeviceVersion 0.2 MiB   FacebookFBOP 0.2 MiB   FacebookFBSS 0.5 MiB   FacebookOperatingSystemName 0.5 MiB   FacebookOperatingSystemVersion 0.5 MiB   Anonymized 0.1 MiB   HackerAttackVector 0.1 MiB   HackerToolkit 0.1 MiB   KoboAffiliate 0.1 MiB   KoboPlatformId 0.1 MiB   IECompatibilityVersion 0.4 MiB   IECompatibilityVersionMajor 0.4 MiB   IECompatibilityNameVersion 0.4 MiB   IECompatibilityNameVersionMajor 0.4 MiB   Carrier 0.2 MiB   GSAInstallationID 0.1 MiB   NetworkType 0.1 MiB    "},{"uri":"/developer/shadingdependencies/","title":"Shading dependencies","tags":[],"description":"","content":"Introduction This is a summary of the reasons WHY I have done the shading in this project the way it is now.\nIf someone has suggestions/hint on how this can be done better I\u0026rsquo;m really curious what the \u0026lsquo;right\u0026rsquo; way of doing this is.\nThe base structure of this project is we have a module with the functionality and a set of \u0026lsquo;UDFs\u0026rsquo; that wrap this functionality so that it can be used in external processing frameworks (like Pig, Flink, Hive, etc.)\nBase goal This library and the UDFs should be easy to use for all downstream users that want to use this in their projects.\nProblem 1: Problematic dependencies Some of the dependencies (Antlr4, Spring and SnakeYaml) have proven to be problematic for downstream users who need different versions of these in the same application.\nSolution 1: Shade and relocate So for only these we include and relocate the used classes into the main jar.\nIn the pom.xml\n\u0026lt;plugin\u0026gt;  \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;maven-shade-plugin\u0026lt;/artifactId\u0026gt;   \u0026lt;configuration\u0026gt;  \u0026lt;minimizeJar\u0026gt;true\u0026lt;/minimizeJar\u0026gt;  \u0026lt;createDependencyReducedPom\u0026gt;true\u0026lt;/createDependencyReducedPom\u0026gt;  \u0026lt;relocations\u0026gt;  \u0026lt;relocation\u0026gt;  \u0026lt;pattern\u0026gt;org.springframework\u0026lt;/pattern\u0026gt;  \u0026lt;shadedPattern\u0026gt;nl.basjes.shaded.org.springframework\u0026lt;/shadedPattern\u0026gt;  \u0026lt;/relocation\u0026gt;  \u0026lt;relocation\u0026gt;  \u0026lt;pattern\u0026gt;org.antlr\u0026lt;/pattern\u0026gt;  \u0026lt;shadedPattern\u0026gt;nl.basjes.shaded.org.antlr\u0026lt;/shadedPattern\u0026gt;  \u0026lt;/relocation\u0026gt;  \u0026lt;relocation\u0026gt;  \u0026lt;pattern\u0026gt;org.yaml.snakeyaml\u0026lt;/pattern\u0026gt;  \u0026lt;shadedPattern\u0026gt;nl.basjes.shaded.org.yaml.snakeyaml\u0026lt;/shadedPattern\u0026gt;  \u0026lt;/relocation\u0026gt;  \u0026lt;/relocations\u0026gt;  \u0026lt;/configuration\u0026gt;   \u0026lt;executions\u0026gt;  \u0026lt;execution\u0026gt;  \u0026lt;id\u0026gt;inject-problematic-dependencies\u0026lt;/id\u0026gt;  \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt;  \u0026lt;goals\u0026gt;  \u0026lt;goal\u0026gt;shade\u0026lt;/goal\u0026gt;  \u0026lt;/goals\u0026gt;  \u0026lt;configuration\u0026gt;  \u0026lt;artifactSet\u0026gt;  \u0026lt;includes\u0026gt;  \u0026lt;include\u0026gt;org.antlr:antlr4-runtime\u0026lt;/include\u0026gt;  \u0026lt;include\u0026gt;org.springframework:spring-core\u0026lt;/include\u0026gt;  \u0026lt;include\u0026gt;org.yaml:snakeyaml\u0026lt;/include\u0026gt;  \u0026lt;/includes\u0026gt;  \u0026lt;/artifactSet\u0026gt;  \u0026lt;/configuration\u0026gt;  \u0026lt;/execution\u0026gt;   \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; Problem 2: Transitive dependencies Turns out that a shaded jar still contains the original pom.xml that references the shaded dependencies. As a consequence the downstream users (like the udfs in this project) still include the entire set of dependencies (not used by the code) in addition to the shaded versions (used by the code).\nThis is a known problem in the Maven shade plugin: https://issues.apache.org/jira/browse/MSHADE-36\nFor which I\u0026rsquo;ve put up a pull request: https://github.com/apache/maven-shade-plugin/pull/25\nSolution 2: Inject the dependency-reduced-pom.xml into the final jar This way building an external project no longer includes things like Antlr a second time.\nScript: inject-dependency-reduced-pom-into-jar.sh:\n#!/bin/bash groupId=$1 artifactId=$2 version=$3  DIR=META-INF/maven/${groupId}/${artifactId} mkdir -p target/${DIR} cp dependency-reduced-pom.xml target/${DIR}/pom.xml jar -uf target/${artifactId}-${version}.jar -C target ${DIR}/pom.xml and in the pom.xml:\n\u0026lt;plugin\u0026gt;  \u0026lt;groupId\u0026gt;org.codehaus.mojo\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;exec-maven-plugin\u0026lt;/artifactId\u0026gt;  \u0026lt;version\u0026gt;1.6.0\u0026lt;/version\u0026gt;  \u0026lt;executions\u0026gt;  \u0026lt;execution\u0026gt;  \u0026lt;id\u0026gt;Inject dependency-reduced-pom.xml to the final jar file\u0026lt;/id\u0026gt;  \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt;  \u0026lt;goals\u0026gt;  \u0026lt;goal\u0026gt;exec\u0026lt;/goal\u0026gt;  \u0026lt;/goals\u0026gt;  \u0026lt;configuration\u0026gt;  \u0026lt;executable\u0026gt;./inject-dependency-reduced-pom-into-jar.sh\u0026lt;/executable\u0026gt;  \u0026lt;arguments\u0026gt;  \u0026lt;argument\u0026gt;${project.groupId}\u0026lt;/argument\u0026gt;  \u0026lt;argument\u0026gt;${project.artifactId}\u0026lt;/argument\u0026gt;  \u0026lt;argument\u0026gt;${project.version}\u0026lt;/argument\u0026gt;  \u0026lt;/arguments\u0026gt;  \u0026lt;/configuration\u0026gt;  \u0026lt;/execution\u0026gt;  \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; Problem 3: The other modules look at the original pom.xml So after solution 2 it is all fine for external projects using the created jar file because they look at the pom.xml in that jar file.\nThe remaining problem is that any other module in this (multi module) project will look at the original pom.xml instead of the cleaned one in the jar file.\nAs a consequence the Hive UDF jar file contains\n$ unzip -l udfs/hive/target/yauaa-hive-5.12-SNAPSHOT-udf.jar | fgrep org/springframework/core/io/ResourceLoader.class  494 2019-08-23 12:26 nl/basjes/shaded/org/springframework/core/io/ResourceLoader.class  487 2019-02-13 05:32 org/springframework/core/io/ResourceLoader.class I filed a bug report/ missing feature for this in the Maven shade plugin: https://issues.apache.org/jira/browse/MSHADE-326\nFor which I\u0026rsquo;ve put up a pull request: https://github.com/apache/maven-shade-plugin/pull/26\nSolution 3: Manually exclude them So we exclude these 4 shaded dependencies in all modules in this project so they are no longer included double in the final jars.\nProblem 4: No such classfile \u0026hellip; Which gives rise to a new problem: When building/developing these modules the code will complain about missing dependencies. The dependencies have been shaded, relocated and excluded \u0026hellip; which means that any code looking for the \u0026lsquo;original\u0026rsquo; class name will find it to be missing.\nSolution 4: Include as \u0026lsquo;provided\u0026rsquo; The final step I had to take was to include these 4 dependencies again as \u0026lsquo;provided\u0026rsquo; in all modules in this project.\nAdditional notes  Immediately setting these dependencies to \u0026lsquo;provided\u0026rsquo; causes them not to be included by the shade plugin. Using the optional setting on the dependency caused \u0026ldquo;missing classes\u0026rdquo; errors in IntelliJ  "},{"uri":"/expect/tryit/","title":"Try it!","tags":[],"description":"","content":"You can try it online with your own browser here: https://try.yauaa.basjes.nl/.\nNOTES\n This runs on a very slow and rate limited machine. If you really like this then run it on your local systems. It\u0026rsquo;s much faster that way. A Kubernetes ready Docker image is provided. See this page about the WebServlet for more information.  "},{"uri":"/using/webservlet/","title":"The demonstration webservlet","tags":[],"description":"","content":"Part of the distribution is a war file that is a servlet that has a webinterface and some APIs that allow you to try things out.\nThis servlet can be downloaded via\n\u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;nl.basjes.parse.useragent\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;yauaa-webapp\u0026lt;/artifactId\u0026gt;  \u0026lt;version\u0026gt;6.11\u0026lt;/version\u0026gt;  \u0026lt;type\u0026gt;war\u0026lt;/type\u0026gt; \u0026lt;/dependency\u0026gt; NOTE that this is a DEMONSTRATION servlet!\nIt is simply the library in a servlet, no optimizations or smart memory settings have been done at all.\nDocker Starting with version 5.14.1 the webservlet is also published to the central docker registry.\nhttps://hub.docker.com/r/nielsbasjes/yauaa  So with docker installed and running on your (Linux) desktop you should be able to so something as simple as\ndocker pull nielsbasjes/yauaa:6.11 docker run -p8080:8080 nielsbasjes/yauaa:6.11 and then open\nhttp://localhost:8080/  in your browser to get the output of the servlet.\nCustom rules The servlet supports loading your own custom rules, which can be useful to classify internal monitoring systems. It does this by looking in the folder that start with UserAgents for yaml files (i.e. file:UserAgents*/*.yaml ).\nBased on the docker image this can be easily done with an additional layer where your entire Dockerfile looks like this\nFROMnielsbasjes/yauaa:6.11ADD InternalTraffic.yaml UserAgents/When you build that docker image and run it the logging should contain something like this:\nLoading 1 rule files using expression: file:UserAgents*/*.yaml - Preparing InternalTraffic.yaml (9608 bytes) - Loaded 1 files in 11 msec using expression: file:UserAgents*/*.yaml  "},{"uri":"/using/kubernetes/","title":"Kubernetes","tags":[],"description":"","content":"I\u0026rsquo;ve been playing around with Kubernetes and the code below \u0026ldquo;works on my cluster\u0026rdquo;.\nBasic Service First create a dedicated namespace and a very basic deployment to run this image 3 times and exposes it as a Service that simply does http.\napiVersion: v1 kind: Namespace metadata:  name: yauaa  ---  apiVersion: apps/v1 kind: Deployment metadata:  name: yauaa  namespace: yauaa spec:  selector:  matchLabels:  app: yauaa  replicas: 3  template:  metadata:  labels:  app: yauaa  spec:  containers:  - name: yauaa  image: nielsbasjes/yauaa:6.11  ports:  - containerPort: 8080  name: yauaa  protocol: TCP  livenessProbe:  httpGet:  path: /liveness  port: yauaa  initialDelaySeconds: 2  periodSeconds: 3  readinessProbe:  httpGet:  path: /readiness  port: yauaa  initialDelaySeconds: 10  periodSeconds: 10  ---  apiVersion: v1 kind: Service metadata:  name: yauaa  namespace: yauaa spec:  selector:  app: yauaa  ports:  - name: default  protocol: TCP  port: 80  targetPort: 8080  type: ClusterIP Custom rules in Kubernetes In some cases you\u0026rsquo;ll have internal systems with custom useragents. You can write your own rules and include them in the deployment.\nFirst define your rules and store them as a configmap in k8s.\nYou can do this by putting the config files in a folder \u0026lsquo;foo\u0026rsquo; and doing something like: kubectl create -n yauaa configmap niels-yauaa-rules --from-file=foo\nOr you can include them directly in the kubectl config file like this:\napiVersion: v1 kind: ConfigMap metadata:  name: niels-yauaa-rules  namespace: yauaa data:  MyCustomRules.yaml: |config: - matcher: require: - \u0026#39;agent.product.name=\u0026#34;NielsBasjes\u0026#34;\u0026#39; extract: - \u0026#39;CustomRuleDemonstrationName : 42 :\u0026#34;A Simple demonstration of a custom rule\u0026#34;\u0026#39; - \u0026#39;CustomRuleDemonstrationWebsite : 42 :\u0026#34;https://yauaa.basjes.nl\u0026#34;\u0026#39; - test: input: user_agent_string: \u0026#39;NielsBasjes/42 (https://niels.basjes.nl)\u0026#39; expected: DeviceClass : \u0026#39;Robot\u0026#39; DeviceName : \u0026#39;Basjes Robot\u0026#39; DeviceBrand : \u0026#39;Basjes\u0026#39; OperatingSystemClass : \u0026#39;Cloud\u0026#39; OperatingSystemName : \u0026#39;Cloud\u0026#39; OperatingSystemVersion : \u0026#39;??\u0026#39; OperatingSystemVersionMajor : \u0026#39;??\u0026#39; OperatingSystemNameVersion : \u0026#39;Cloud ??\u0026#39; OperatingSystemNameVersionMajor : \u0026#39;Cloud ??\u0026#39; LayoutEngineClass : \u0026#39;Unknown\u0026#39; LayoutEngineName : \u0026#39;Unknown\u0026#39; LayoutEngineVersion : \u0026#39;??\u0026#39; LayoutEngineVersionMajor : \u0026#39;??\u0026#39; LayoutEngineNameVersion : \u0026#39;Unknown ??\u0026#39; LayoutEngineNameVersionMajor : \u0026#39;Unknown ??\u0026#39; AgentClass : \u0026#39;Special\u0026#39; AgentName : \u0026#39;NielsBasjes\u0026#39; AgentVersion : \u0026#39;42\u0026#39; AgentVersionMajor : \u0026#39;42\u0026#39; AgentNameVersion : \u0026#39;NielsBasjes 42\u0026#39; AgentNameVersionMajor : \u0026#39;NielsBasjes 42\u0026#39; AgentInformationUrl : \u0026#39;https://niels.basjes.nl\u0026#39; CustomRuleDemonstrationName : \u0026#39;A Simple demonstration of a custom rule\u0026#39; CustomRuleDemonstrationWebsite : \u0026#39;https://yauaa.basjes.nl\u0026#39; Then the deployment must turn this config map into a volume and mount it in the pods. Note that the folder under which it is mounted must be at the root level and the name must start with \u0026ldquo;UserAgent\u0026rdquo;.\nSo the deployment becomes something like this\napiVersion: apps/v1 kind: Deployment metadata:  name: yauaa  namespace: yauaa spec:  selector:  matchLabels:  app: yauaa  replicas: 3  template:  metadata:  labels:  app: yauaa  spec:  volumes:  - name: niels-yauaa-rules-volume  configMap:  name: niels-yauaa-rules  containers:  - name: yauaa  image: nielsbasjes/yauaa:6.11  volumeMounts:  # NOTE 1: The directory name MUST start with \u0026#34;/UserAgents\u0026#34; !!  # NOTE 2: You can have multiple as long as the mountPaths are all different.  - name: niels-yauaa-rules-volume  mountPath: /UserAgents-Niels  ports:  - containerPort: 8080  name: yauaa  protocol: TCP  livenessProbe:  httpGet:  path: /liveness  port: yauaa  initialDelaySeconds: 2  periodSeconds: 3  readinessProbe:  httpGet:  path: /readiness  port: yauaa  initialDelaySeconds: 10  periodSeconds: 10 Available outside the cluster (HTTP) Depending on your Kubernetes cluster you may have the option to change the .spec.type of the above Service to LoadBalancer or you may choose to expose it via an Ingress.\nI have been able to get it working with the helm chart for stable/nginx-ingress where I have enabled SSL.\nSimply putting up an Ingress works something like this\napiVersion: extensions/v1beta1 kind: Ingress metadata:  name: yauaa  namespace: yauaa  annotations:  kubernetes.io/ingress.class: nginx spec:  rules:  - host: yauaa.example.nl  http:  paths:  - backend:  serviceName: yauaa  servicePort: 80  path: / Available outside the cluster (HTTPS) Now I wanted to use https:// instead of http://.\nBefore you can start this you need the SSL (TLS actually) certificate and key for the hostname you have.\nI created the required secret (in the correct namespace) with a command similar to this (I have letsencrypt):\nkubectl -n yauaa create secret tls yauaa-cert --key=/etc/letsencrypt/live/example.nl/privkey.pem --cert=/etc/letsencrypt/live/example.nl/fullchain.pem After the secret has been put into place the Ingress can be created with SSL (official K8S documentation on this).\napiVersion: networking.k8s.io/v1 kind: Ingress metadata:  name: yauaa  namespace: yauaa  annotations:  kubernetes.io/ingress.class: nginx  nginx.ingress.kubernetes.io/force-ssl-redirect: \u0026#34;true\u0026#34; spec:  tls:  - hosts:  - yauaa.example.nl  secretName: yauaa-cert  rules:  - host: yauaa.example.nl  http:  paths:  - path: /  pathType: Prefix  backend:  service:  name: yauaa  port:  number: 80 "},{"uri":"/using/license/","title":"Licence","tags":[],"description":"","content":"Apache License Version 2.0, January 2004 https://www.apache.org/licenses/\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\nLicensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\nLegal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\nYou (or Your) shall mean an individual or Legal Entity exercising permissions granted by this License.\nSource form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\nObject form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\nWork shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\nDerivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\nContribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution.\nContributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\nGrant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\nGrant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\nRedistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices stating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n(d) If the Work includes a \u0026ldquo;NOTICE\u0026rdquo; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\nSubmission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\nTrademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\nDisclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u0026ldquo;AS IS\u0026rdquo; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\nLimitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\nAccepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \u0026ldquo;[]\u0026rdquo; replaced with your own identifying information. (Don\u0026rsquo;t include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u0026ldquo;printed page\u0026rdquo; as the copyright notice for easier identification within third-party archives.\nCopyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. "},{"uri":"/other/","title":"Other","tags":[],"description":"","content":"  Blogpost   Related projects   "},{"uri":"/udf/apache-beam/","title":"Apache Beam","tags":[],"description":"","content":"Introduction This is a User Defined Function for Apache Beam\nGetting the UDF You can get the prebuilt UDF from maven central.\nIf you use a maven based project simply add this dependency to your project.\n\u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;nl.basjes.parse.useragent\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;yauaa-beam\u0026lt;/artifactId\u0026gt;  \u0026lt;version\u0026gt;6.11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Example usage Assume you have a PCollection with your records. In most cases I see (clickstream data) these records (In this example this class is called \u0026ldquo;TestRecord\u0026rdquo;) contain the useragent string in a field and the parsed results must be added to these fields.\nNow you must do two things:\n Determine the names of the fields you need. Add an instance of the (abstract) UserAgentAnalysisDoFn function and implement the functions as shown in the example below. Use the YauaaField annotation to get the setter for the requested fields.  Note that the name of the two setters is not important, the system looks at the annotation.\n.apply(\u0026#34;Extract Elements from Useragent\u0026#34;,  ParDo.of(new UserAgentAnalysisDoFn\u0026lt;TestRecord\u0026gt;(15000) { // Setting the cacheSize  @Override  public String getUserAgentString(TestRecord record) {  return record.useragent;  }   @SuppressWarnings(\u0026#34;unused\u0026#34;) // Called via the annotation  @YauaaField(\u0026#34;DeviceClass\u0026#34;)  public void setDC(TestRecord record, String value) {  record.deviceClass = value;  }   @SuppressWarnings(\u0026#34;unused\u0026#34;) // Called via the annotation  @YauaaField(\u0026#34;AgentNameVersion\u0026#34;)  public void setANV(TestRecord record, String value) {  record.agentNameVersion = value;  }  })); Immutable instances in Apache Beam Apache Beam requires a DoFn to never modify the provided instance and to always return a new instance that is then passed to the next processing step. To handle this in a generic way UserAgentAnalysisDoFn has a \u0026ldquo;clone\u0026rdquo; method that does this by means of doing a round trip through serialization. If you can do a more efficient way for your specific class then please override the clone method.\nNOTES on defining it as an anonymous class An anonymous inner class in Java is by default private.\nIf you define it as an anonymous inner class as shown above then the system will try to make this class to become public by means of the method .setAccessible(true). There are situations in which this will fail (amongst others the SecurityManager can block this). If you run into such a scenario then simply \u0026rsquo;not\u0026rsquo; define it inline as an anonymous class and define it as a named (public) class instead.\nSo the earlier example will look something like this:\npublic class MyUserAgentAnalysisDoFn extends UserAgentAnalysisDoFn\u0026lt;TestRecord\u0026gt; {  @Override  public String getUserAgentString(TestRecord record) {  return record.useragent;  }   @SuppressWarnings(\u0026#34;unused\u0026#34;) // Called via the annotation  @YauaaField(\u0026#34;DeviceClass\u0026#34;)  public void setDC(TestRecord record, String value) {  record.deviceClass = value;  }   @SuppressWarnings(\u0026#34;unused\u0026#34;) // Called via the annotation  @YauaaField(\u0026#34;AgentNameVersion\u0026#34;)  public void setANV(TestRecord record, String value) {  record.agentNameVersion = value;  } } and then in the topology simply do this\n.apply(\u0026#34;Extract Elements from Useragent\u0026#34;,  ParDo.of(new MyUserAgentAnalysisDoFn())); "},{"uri":"/udf/apache-beam-sql/","title":"Apache Beam SQL","tags":[],"description":"","content":"Introduction This is a User Defined Function for Apache Beam SQL.\nGetting the UDF You can get the prebuilt UDF from maven central.\nIf you use a maven based project simply add this dependency to your project.\n\u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;nl.basjes.parse.useragent\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;yauaa-beam-sql\u0026lt;/artifactId\u0026gt;  \u0026lt;version\u0026gt;6.11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Available functions Getting a single value To get a single value from the parse result use this one:\nParseUserAgentField(userAgent, 'DeviceClass') AS deviceClassField  to give\nPhone  Getting several values as a Map (requires Apache Beam 2.30.0 or newer) You can ask for all fields and return the full map with all of them in there.\nParseUserAgent(userAgent) AS allFields  If you need multiple fields but not all of them you can speed up the analysis by only asking for those specific fields:\nParseUserAgent(userAgent, 'DeviceClass', 'AgentNameVersion') AS someFields  With such a map you can then extract the field you really need with SQL syntax similar to this:\nParseUserAgent(userAgent, 'DeviceClass')['DeviceClass'] AS deviceClass ParseUserAgent(userAgent)['AgentNameVersion'] AS agentNameVersion  Getting several values as JSon Assuming the input\nMozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD90Z) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.124 Mobile Safari/537.36  To parse this input value into all possible values and returns the complete result as a single JSon string use this:\nParseUserAgentJson(userAgent)  to give (single line)\n{\u0026quot;Useragent\u0026quot;:\u0026quot;Mozilla\\/5.0 (Linux; Android 7.0; Nexus 6 Build\\/NBD90Z) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/53.0.2785.124 Mobile Safari\\/537.36\u0026quot;, \u0026quot;DeviceClass\u0026quot;:\u0026quot;Phone\u0026quot;,\u0026quot;DeviceName\u0026quot;:\u0026quot;Google Nexus 6\u0026quot;,\u0026quot;DeviceBrand\u0026quot;:\u0026quot;Google\u0026quot;, \u0026quot;OperatingSystemClass\u0026quot;:\u0026quot;Mobile\u0026quot;,\u0026quot;OperatingSystemName\u0026quot;:\u0026quot;Android\u0026quot;,\u0026quot;OperatingSystemVersion\u0026quot;:\u0026quot;7.0\u0026quot;,\u0026quot;OperatingSystemVersionMajor\u0026quot;:\u0026quot;7\u0026quot;,\u0026quot;OperatingSystemNameVersion\u0026quot;:\u0026quot;Android 7.0\u0026quot;,\u0026quot;OperatingSystemNameVersionMajor\u0026quot;:\u0026quot;Android 7\u0026quot;,\u0026quot;OperatingSystemVersionBuild\u0026quot;:\u0026quot;NBD90Z\u0026quot;, \u0026quot;LayoutEngineClass\u0026quot;:\u0026quot;Browser\u0026quot;,\u0026quot;LayoutEngineName\u0026quot;:\u0026quot;Blink\u0026quot;,\u0026quot;LayoutEngineVersion\u0026quot;:\u0026quot;53.0\u0026quot;,\u0026quot;LayoutEngineVersionMajor\u0026quot;:\u0026quot;53\u0026quot;,\u0026quot;LayoutEngineNameVersion\u0026quot;:\u0026quot;Blink 53.0\u0026quot;,\u0026quot;LayoutEngineNameVersionMajor\u0026quot;:\u0026quot;Blink 53\u0026quot;, \u0026quot;AgentClass\u0026quot;:\u0026quot;Browser\u0026quot;,\u0026quot;AgentName\u0026quot;:\u0026quot;Chrome\u0026quot;,\u0026quot;AgentVersion\u0026quot;:\u0026quot;53.0.2785.124\u0026quot;,\u0026quot;AgentVersionMajor\u0026quot;:\u0026quot;53\u0026quot;,\u0026quot;AgentNameVersion\u0026quot;:\u0026quot;Chrome 53.0.2785.124\u0026quot;,\u0026quot;AgentNameVersionMajor\u0026quot;:\u0026quot;Chrome 53\u0026quot;}  To get a JSon with only specific fields you can do (up to 10 fields van be requested this way)\nParseUserAgentJson(userAgent, 'DeviceClass', 'AgentNameVersion')  to give\n{\u0026quot;DeviceClass\u0026quot;:\u0026quot;Phone\u0026quot;,\u0026quot;AgentNameVersion\u0026quot;:\u0026quot;Chrome 53.0.2785.124\u0026quot;}  Example usage Assume you have a PCollection with your records.\nPCollection\u0026lt;Row\u0026gt; input = ...  You can then put that through an SQL statement to transform it. You have to name the input (in this example we call it InputStream), and you have to register the UDF classes you want to use with the name you want to have in your SQL statement.\nPCollection\u0026lt;Row\u0026gt; result = // This way we give a name to the input stream for use in the SQL PCollectionTuple.of(\u0026quot;InputStream\u0026quot;, input) // Apply the SQL with the UDFs we need. .apply(\u0026quot;Execute SQL\u0026quot;, SqlTransform .query( \u0026quot;SELECT\u0026quot; + \u0026quot; userAgent AS userAgent, \u0026quot; + \u0026quot; ParseUserAgent(userAgent, 'DeviceClass', 'AgentNameVersion') AS parsedUserAgentMap, \u0026quot; + \u0026quot; ParseUserAgentJson(userAgent) AS parsedUserAgentJson, \u0026quot; + \u0026quot; ParseUserAgentField(userAgent, 'DeviceClass') AS deviceClass, \u0026quot; + \u0026quot; ParseUserAgentField(userAgent, 'AgentNameVersion') AS agentNameVersion \u0026quot; + \u0026quot;FROM InputStream\u0026quot;) .registerUdf(\u0026quot;ParseUserAgent\u0026quot;, ParseUserAgent.class) .registerUdf(\u0026quot;ParseUserAgentJson\u0026quot;, ParseUserAgentJson.class) .registerUdf(\u0026quot;ParseUserAgentField\u0026quot;, ParseUserAgentField.class) );  Limitations / Future The ParseUserAgent and ParseUserAgentJson have a limitation of at most 10 fieldnames because Calcite does not yet support variable arguments for UDFs. If you need more than 10 fields you currently need to get all fields and then extract the fields you need from there.\n https://issues.apache.org/jira/browse/CALCITE-2772  "},{"uri":"/udf/apache-drill/","title":"Apache Drill","tags":[],"description":"","content":"Introduction This is UDF for Apache Drill. This function was originally created by Charles S. Givre and was imported into the main Yauaa project to ensure users would have a prebuilt and up-to-date version available.\nThis function is now also packaged as part of Apache Drill itself: documentation.\nSTATUS: \u0026hellip; Works on my machine \u0026hellip; I have copied/implemented the functions\nparse_user_agent ( \u0026lt;useragent\u0026gt; ) parse_user_agent_field ( \u0026lt;useragent\u0026gt; , \u0026lt;desired fieldname\u0026gt; )  Able to do basic unit test during build for the parse_user_agent_field function. NOT yet able to do automated testing for the parse_user_agent function.\nWhen I run it in a local drill the things I try work for the most (see below). I have not yet tested this in a distributed setup.\nSo please try it out and report any issues and/or improvements you see.\nGetting the UDF You can get the prebuilt UDF from maven central.\nIf you use a maven based project simply add this dependency to your project.\n\u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;nl.basjes.parse.useragent\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;yauaa-drill\u0026lt;/artifactId\u0026gt;  \u0026lt;version\u0026gt;6.11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Installation To install this function put the jar file in the \u0026lt;drill-path\u0026gt;/jars/3rdparty directory.\ncp yauaa-drill-\u0026lt;version\u0026gt;.jar \u0026lt;drill-path\u0026gt;/jars/3rdparty  Make sure you replace \u0026lt;drill-path\u0026gt; with your actual path to your drill installation. NOTE: You do not need the yauaa-drill-\u0026lt;version\u0026gt;-sources.jar to run in drill.\nUsage and examples Working queries with a direct value\nSELECT parse_user_agent_field('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36', 'AgentNameVersion') from (values(1)); +----------------------+ | EXPR$0 | +----------------------+ | Chrome 48.0.2564.82 | +----------------------+  This one doesn\u0026rsquo;t work\nSELECT parse_user_agent('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36') from (values(1)); Error: PLAN ERROR: Failure while materializing expression in constant expression evaluator [PARSE_USER_AGENT('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36')]. Errors: Error in expression at index -1. Error: Only ProjectRecordBatch could have complex writer function. You are using complex writer function parse_user_agent in a non-project operation!. Full expression: --UNKNOWN EXPRESSION--.  Assume the file /tmp/testcase.tsv which contains 2 lines:\nMozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36 Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12F70 Safari/600.1.4 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)  Working queries using the input file\nSELECT parse_user_agent_field(columns[0], 'AgentNameVersion') AS AgentNameVersion from dfs.`/tmp/testcase.tsv`; +----------------------+ | AgentNameVersion | +----------------------+ | Chrome 48.0.2564.82 | | Googlebot 2.1 | +----------------------+  and\nSELECT parse_user_agent(columns[0]) AS AgentNameVersion from dfs.`/tmp/testcase.tsv`; +------------------+ | AgentNameVersion | +------------------+ | { \u0026quot;DeviceClass\u0026quot;: \u0026quot;Desktop\u0026quot;, \u0026quot;DeviceName\u0026quot;: \u0026quot;Linux Desktop\u0026quot;, \u0026quot;DeviceBrand\u0026quot;: \u0026quot;Unknown\u0026quot;, \u0026quot;DeviceCpu\u0026quot;: \u0026quot;Intel x86_64\u0026quot;, \u0026quot;DeviceCpuBits\u0026quot;: \u0026quot;64\u0026quot;, \u0026quot;OperatingSystemClass\u0026quot;: \u0026quot;Desktop\u0026quot;, \u0026quot;OperatingSystemName\u0026quot;: \u0026quot;Linux\u0026quot;, \u0026quot;OperatingSystemVersion\u0026quot;: \u0026quot;??\u0026quot;, \u0026quot;OperatingSystemNameVersion\u0026quot;: \u0026quot;Linux ??\u0026quot;, \u0026quot;LayoutEngineClass\u0026quot;: \u0026quot;Browser\u0026quot;, \u0026quot;LayoutEngineName\u0026quot;: \u0026quot;Blink\u0026quot;, \u0026quot;LayoutEngineVersion\u0026quot;: \u0026quot;48.0\u0026quot;, \u0026quot;LayoutEngineVersionMajor\u0026quot;: \u0026quot;48\u0026quot;, \u0026quot;LayoutEngineNameVersion\u0026quot;: \u0026quot;Blink 48.0\u0026quot;, \u0026quot;LayoutEngineNameVersionMajor\u0026quot;: \u0026quot;Blink 48\u0026quot;, \u0026quot;AgentClass\u0026quot;: \u0026quot;Browser\u0026quot;, \u0026quot;AgentName\u0026quot;: \u0026quot;Chrome\u0026quot;, \u0026quot;AgentVersion\u0026quot;: \u0026quot;48.0.2564.82\u0026quot;, \u0026quot;AgentVersionMajor\u0026quot;: \u0026quot;48\u0026quot;, \u0026quot;AgentNameVersion\u0026quot;: \u0026quot;Chrome 48.0.2564.82\u0026quot;, \u0026quot;AgentNameVersionMajor\u0026quot;: \u0026quot;Chrome 48\u0026quot; } | | { \u0026quot;DeviceClass\u0026quot;: \u0026quot;Robot Mobile\u0026quot;, \u0026quot;DeviceName\u0026quot;: \u0026quot;Google\u0026quot;, \u0026quot;DeviceBrand\u0026quot;: \u0026quot;Google\u0026quot;, \u0026quot;OperatingSystemClass\u0026quot;: \u0026quot;Cloud\u0026quot;, \u0026quot;OperatingSystemName\u0026quot;: \u0026quot;Google\u0026quot;, \u0026quot;OperatingSystemVersion\u0026quot;: \u0026quot;Google\u0026quot;, \u0026quot;OperatingSystemNameVersion\u0026quot;: \u0026quot;Google\u0026quot;, \u0026quot;LayoutEngineClass\u0026quot;: \u0026quot;Robot\u0026quot;, \u0026quot;LayoutEngineName\u0026quot;: \u0026quot;Googlebot\u0026quot;, \u0026quot;LayoutEngineVersion\u0026quot;: \u0026quot;Googlebot\u0026quot;, \u0026quot;LayoutEngineVersionMajor\u0026quot;: \u0026quot;Googlebot\u0026quot;, \u0026quot;LayoutEngineNameVersion\u0026quot;: \u0026quot;Googlebot\u0026quot;, \u0026quot;LayoutEngineNameVersionMajor\u0026quot;: \u0026quot;Googlebot\u0026quot;, \u0026quot;AgentClass\u0026quot;: \u0026quot;Robot Mobile\u0026quot;, \u0026quot;AgentName\u0026quot;: \u0026quot;Googlebot\u0026quot;, \u0026quot;AgentVersion\u0026quot;: \u0026quot;2.1\u0026quot;, \u0026quot;AgentVersionMajor\u0026quot;: \u0026quot;2\u0026quot;, \u0026quot;AgentNameVersion\u0026quot;: \u0026quot;Googlebot 2.1\u0026quot;, \u0026quot;AgentNameVersionMajor\u0026quot;: \u0026quot;Googlebot 2\u0026quot;, \u0026quot;AgentInformationUrl\u0026quot;: \u0026quot;http://www.google.com/bot.html\u0026quot; } | +------------------+  The function returns a Drill map, so you can access any of the fields using Drill\u0026rsquo;s table.map.key notation. For example, the query below illustrates how to extract a field from this map and summarize it:\nSELECT uadata.ua.AgentNameVersion AS Browser, COUNT( * ) AS BrowserCount FROM ( SELECT parse_user_agent( columns[0] ) AS ua FROM dfs.`/tmp/testcase.tsv` ) AS uadata GROUP BY uadata.ua.AgentNameVersion ORDER BY BrowserCount DESC; +----------------------+---------------+ | Browser | BrowserCount | +----------------------+---------------+ | Chrome 48.0.2564.82 | 1 | | Googlebot 2.1 | 1 | +----------------------+---------------+  "},{"uri":"/udf/apache-flink/","title":"Apache Flink","tags":[],"description":"","content":"Introduction This is a User Defined Function for Apache Flink\nGetting the UDF You can get the prebuilt UDF from maven central.\nIf you use a maven based project simply add this dependency to your project.\n\u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;nl.basjes.parse.useragent\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;yauaa-flink\u0026lt;/artifactId\u0026gt;  \u0026lt;version\u0026gt;6.11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Example usage Assume you have a DataSet or DataStream with your records. In most cases I see (clickstream data) these records (In this example this class is called \u0026ldquo;TestRecord\u0026rdquo;) contain the useragent string in a field and the parsed results must be added to these fields.\nNow you must do two things:\n Determine the names of the fields you need. Add an instance of the (abstract) UserAgentAnalysisMapper mapper and implement the functions as shown in the example below. Use the Field annotation to get the setter for the requested fields.  Note that the name of the two setters is not important, the system looks at the annotation.\n.map(new UserAgentAnalysisMapper\u0026lt;TestRecord\u0026gt;(15000) { // Setting the cacheSize  @Override  public String getUserAgentString(TestRecord record) {  return record.useragent;  }   @SuppressWarnings(\u0026#34;unused\u0026#34;) // Called via the annotation  @YauaaField(\u0026#34;DeviceClass\u0026#34;)  public void setDC(TestRecord record, String value) {  record.deviceClass = value;  }   @SuppressWarnings(\u0026#34;unused\u0026#34;) // Called via the annotation  @YauaaField(\u0026#34;AgentNameVersion\u0026#34;)  public void setANV(TestRecord record, String value) {  record.agentNameVersion = value;  } }) NOTES on defining it as an anonymous class An anonymous inner class in Java is by default private.\nIf you define it as an anonymous inner class as shown above then the system will try to make this class to become public by means of the method .setAccessible(true). There are situations in which this will fail (amongst others the SecurityManager can block this). If you run into such a scenario then simply \u0026rsquo;not\u0026rsquo; define it inline as an anonymous class and define it as a named (public) class instead.\nSo the earlier example will look something like this:\npublic class MyUserAgentAnalysisMapper extends UserAgentAnalysisMapper\u0026lt;TestRecord\u0026gt; {  @Override  public String getUserAgentString(TestRecord record) {  return record.useragent;  }   @SuppressWarnings(\u0026#34;unused\u0026#34;) // Called via the annotation  @YauaaField(\u0026#34;DeviceClass\u0026#34;)  public void setDC(TestRecord record, String value) {  record.deviceClass = value;  }   @SuppressWarnings(\u0026#34;unused\u0026#34;) // Called via the annotation  @YauaaField(\u0026#34;AgentNameVersion\u0026#34;)  public void setANV(TestRecord record, String value) {  record.agentNameVersion = value;  } } and then in the topology simply do this\n.map(new MyUserAgentAnalysisMapper()) "},{"uri":"/udf/apache-flink-table/","title":"Apache Flink Table/SQL","tags":[],"description":"","content":"Introduction This is a User Defined Function for Apache Flink Table\nGetting the UDF You can get the prebuilt UDF from maven central.\nIf you use a maven based project simply add this dependency to your project.\n\u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;nl.basjes.parse.useragent\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;yauaa-flink-table\u0026lt;/artifactId\u0026gt;  \u0026lt;version\u0026gt;6.11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; IMPORTANT: Breaking API change In version 5.15 this function was rewritten and as a consequence the API has changed.\nThe function now returns a Map\u0026lt;String, String\u0026gt; with all the requested values in one go.\nSyntax Assume you register this function under the name ParseUserAgent Then the generic usage in your SQL is\nParseUserAgent(\u0026lt;useragent\u0026gt;) This returns a Map\u0026lt;String, String\u0026gt; with all the requested values in one go.\nExample usage (Java) Assume you have either a BatchTableEnvironment or a StreamTableEnvironment in which you have defined your records as a table. In most cases I see (clickstream data) these records contain the useragent string in a column.\n// Give the stream a Table Name tableEnv.registerDataStream(\u0026#34;AgentStream\u0026#34;, inputStream, \u0026#34;timestamp, url, useragent\u0026#34;); Now you must do four things:\n Determine the names of the fields you need. Register the function with the full list of all the fields you want under the name you want. Use the function in your SQL to do the parsing and extract the fields from that. Run the query  // Register the function with all the desired fieldnames and optionally the size of the cache tableEnv.registerFunction(\u0026#34;ParseUserAgent\u0026#34;, new AnalyzeUseragentFunction(15000, \u0026#34;DeviceClass\u0026#34;, \u0026#34;AgentNameVersionMajor\u0026#34;));  // Define the query. String sqlQuery =  \u0026#34;SELECT useragent,\u0026#34;+  \u0026#34; ParseUserAgent(useragent) as parsedUseragent\u0026#34; +  \u0026#34;FROM AgentStream\u0026#34;;  Table resultTable = tableEnv.sqlQuery(sqlQuery);  // A String and the Map with all results TypeInformation\u0026lt;Row\u0026gt; tupleType = new RowTypeInfo(STRING, MAP(STRING, STRING)); DataStream\u0026lt;Row\u0026gt; resultSet = tableEnv.toAppendStream(resultTable, tupleType); or something like this\n// Register the function with all the desired fieldnames and optionally the size of the cache tableEnv.registerFunction(\u0026#34;ParseUserAgent\u0026#34;, new AnalyzeUseragentFunction(15000, \u0026#34;DeviceClass\u0026#34;, \u0026#34;AgentNameVersionMajor\u0026#34;));  // Define the query. String sqlQuery =  \u0026#34;SELECT useragent,\u0026#34;+  \u0026#34; parsedUseragent[\u0026#39;DeviceClass\u0026#39;] AS deviceClass,\u0026#34; +  \u0026#34; parsedUseragent[\u0026#39;AgentNameVersionMajor\u0026#39;] AS agentNameVersionMajor \u0026#34; +  \u0026#34;FROM ( \u0026#34; +  \u0026#34; SELECT useragent,\u0026#34; +  \u0026#34; ParseUserAgent(useragent) AS parsedUseragent\u0026#34; +  \u0026#34; FROM AgentStream \u0026#34; +  \u0026#34;)\u0026#34;;  Table resultTable = tableEnv.sqlQuery(sqlQuery);  // 3 Strings TypeInformation\u0026lt;Row\u0026gt; tupleType = new RowTypeInfo(STRING, STRING, STRING); DataStream\u0026lt;Row\u0026gt; resultSet = tableEnv.toAppendStream(resultTable, tupleType); "},{"uri":"/udf/apache-hive/","title":"Apache Hive","tags":[],"description":"","content":"Introduction This is a User Defined Function for Apache Hive\nGetting the UDF You can get the prebuilt UDF from maven central (yauaa-hive-6.11-udf.jar).\nNOTE: You MUST use the -udf.jar: yauaa-hive-6.11-udf.jar\nIf you use a maven based project simply add this dependency\n\u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;nl.basjes.parse.useragent\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;yauaa-hive\u0026lt;/artifactId\u0026gt;  \u0026lt;classifier\u0026gt;udf\u0026lt;/classifier\u0026gt;  \u0026lt;version\u0026gt;6.11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Building Simply install the normal build tools for a Java project (i.e. maven and jdk) and then simply do:\nmvn clean package  Example usage First the jar file must be \u0026lsquo;known\u0026rsquo; Either by doing\nADD JAR hdfs:///yauaa-hive-6.11-udf.jar or by defining it as a permanent function\nCREATE FUNCTION ParseUserAgent AS \u0026#39;nl.basjes.parse.useragent.hive.ParseUserAgent\u0026#39; USING JAR \u0026#39;hdfs:///yauaa-hive-6.11-udf.jar\u0026#39;; If you are using a recent version of Hive you can also do\nCREATE FUNCTION ParseUserAgent AS \u0026#39;nl.basjes.parse.useragent.hive.ParseUserAgent\u0026#39; USING JAR \u0026#39;ivy://nl.basjes.parse.useragent:yauaa-hive:6.11?classifier=udf\u0026#39;; or installing it locally with the Hive Server\nTODO: Document installation\nVerify if it has been installed\nDESCRIBE FUNCTION ParseUserAgent; +-----------------------------------------------------------------------+ | tab_name | +-----------------------------------------------------------------------+ | ParseUserAgent(str) - Parses the UserAgent into all possible pieces. | +-----------------------------------------------------------------------+ \u0026gt; DESCRIBE FUNCTION EXTENDED ParseUserAgent; +---------------------------------------------------------------------------+ | tab_name | +---------------------------------------------------------------------------+ | parseuseragent(str) - Parses the UserAgent into all possible pieces. | | Synonyms: default.parseuseragent | | Example: | | \u0026gt; SELECT ParseUserAgent(useragent).DeviceClass, | | ParseUserAgent(useragent).OperatingsystemNameVersion, | | ParseUserAgent(useragent).AgentNameVersionMajor | | FROM clickLogs; | | +---------------+-----------------------------+------------------------+ | | | deviceclass | operatingsystemnameversion | agentnameversionmajor | | | +---------------+-----------------------------+------------------------+ | | | Phone | Android 6.0 | Chrome 46 | | | | Tablet | Android 5.1 | Chrome 40 | | | | Desktop | Linux ?? | Chrome 59 | | | | Game Console | Windows 10.0 | Edge 13 | | | +---------------+-----------------------------+------------------------+ | | | +---------------------------------------------------------------------------+  Basic test it works (trimmed the output here)\n\u0026gt; SELECT ParseUserAgent('Mozilla/5.0 (Linux\\; Android 6.0\\; Nexus 6 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.76 Mobile Safari/537.36'); +----------------------------------------------------+ | _c0 | +----------------------------------------------------+ | { \u0026quot;deviceclass\u0026quot;:\u0026quot;Phone\u0026quot;, \u0026quot;devicename\u0026quot;:\u0026quot;Google Nexus 6\u0026quot;, \u0026quot;devicebrand\u0026quot;:\u0026quot;Google\u0026quot;, ... \u0026quot;operatingsystemnameversion\u0026quot;:\u0026quot;Android 6.0\u0026quot;, ... \u0026quot;layoutenginenameversion\u0026quot;:\u0026quot;Blink 46.0\u0026quot;, ... \u0026quot;agentclass\u0026quot;:\u0026quot;Browser\u0026quot;, ... \u0026quot;agentnameversion\u0026quot;:\u0026quot;Chrome 46.0.2490.76\u0026quot;, ... } | +----------------------------------------------------+ 1 row selected (5.682 seconds)  Usage example:\nCREATE TABLE useragents (useragent STRING COMMENT 'The useragent string'); INSERT INTO TABLE useragents VALUES ('Mozilla/5.0 (Linux\\; Android 6.0\\; Nexus 6 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.76 Mobile Safari/537.36'); INSERT INTO TABLE useragents VALUES ('Mozilla/5.0 (Linux\\; Android 5.1\\; Nexus 10 Build/LMY47D) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.109 Safari/537.36'); INSERT INTO TABLE useragents VALUES ('Mozilla/5.0 (X11\\; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'); INSERT INTO TABLE useragents VALUES ('Mozilla/5.0 (Windows NT 10.0\\; Win64\\; x64\\; Xbox\\; Xbox One) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10553'); SELECT ParseUserAgent(useragent).DeviceClass, ParseUserAgent(useragent).OperatingsystemNameVersion, ParseUserAgent(useragent).AgentName, ParseUserAgent(useragent).AgentNameVersionMajor from useragents; +---------------+-----------------------------+------------+------------------------+ | deviceclass | operatingsystemnameversion | agentname | agentnameversionmajor | +---------------+-----------------------------+------------+------------------------+ | Phone | Android 6.0 | Chrome | Chrome 46 | | Tablet | Android 5.1 | Chrome | Chrome 40 | | Desktop | Linux ?? | Chrome | Chrome 59 | | Game Console | Windows 10.0 | Edge | Edge 13 | +---------------+-----------------------------+------------+------------------------+  "},{"uri":"/udf/apache-nifi/","title":"Apache Nifi","tags":[],"description":"","content":"Introduction This is a User Defined Function for Apache Nifi\nIntroduction This is an Apache Nifi Processor for parsing User Agent Strings.\nGetting the Processor You can get the prebuilt NAR file from maven central.\nIf you use a maven based project simply add this dependency\n\u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;nl.basjes.parse.useragent\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;yauaa-nifi\u0026lt;/artifactId\u0026gt;  \u0026lt;type\u0026gt;nar\u0026lt;/type\u0026gt;  \u0026lt;version\u0026gt;6.11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Installation To install this function put the nar file in the \u0026lt;nifi-path\u0026gt;/lib directory.\ncp ./udfs/nifi/nifi-nar/target/yauaa-nifi-\u0026lt;version\u0026gt;.nar \u0026lt;nifi-path\u0026gt;/lib  Make sure you replace \u0026lt;nifi-path\u0026gt; with your actual path to your nifi installation. After you have added this nar file you will find the ParseUserAgent processor in the list.\nUsage and examples   First you make sure that the FLowFile going into this processor has the attribute \u0026ldquo;UseragentString\u0026rdquo; that contains the string to be analyzed.\n  In the configuration enable the fields you need for analysis. By default none have been selected.   The output FlowFile will now have additional attributes for all of the selected attributes that are named Useragent.SelectedField.\nKey: 'Useragent.DeviceClass' Value: 'Phone' Key: 'Useragent.OperatingSystemNameVersion' Value: 'Android 4.1.2'    "},{"uri":"/udf/apache-pig/","title":"Apache Pig","tags":[],"description":"","content":"Introduction This is a User Defined Function for Apache Pig\nGetting the UDF You can get the prebuilt UDF from maven central.\nIf you use a maven based project simply add this dependency\n\u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;nl.basjes.parse.useragent\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;yauaa-pig\u0026lt;/artifactId\u0026gt;  \u0026lt;classifier\u0026gt;udf\u0026lt;/classifier\u0026gt;  \u0026lt;version\u0026gt;6.11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Example usage -- Import the UDF jar file so this script can use it REGISTER ../target/*-udf.jar;  ------------------------------------------------------------------------ -- Define a more readable name for the UDF and pass optional parameters -- First parameter is ALWAYS the cache size (as a text string!) -- The parameters after that are the requested fields. ---------- -- If you simply want \u0026#39;everything\u0026#39; -- DEFINE ParseUserAgent nl.basjes.parse.useragent.pig.ParseUserAgent; ---------- -- If you just want to set the cache -- DEFINE ParseUserAgent nl.basjes.parse.useragent.pig.ParseUserAgent(\u0026#39;10000\u0026#39;); ---------- -- If you want to set the cache and only retrieve the specified fields DEFINE ParseUserAgent nl.basjes.parse.useragent.pig.ParseUserAgent(\u0026#39;10000\u0026#39;, \u0026#39;DeviceClass\u0026#39;, \u0026#39;DeviceBrand\u0026#39; );  rawData =  LOAD \u0026#39;testcases.txt\u0026#39;  USING PigStorage()  AS ( useragent: chararray );  UaData =  FOREACH rawData  GENERATE useragent,  -- Do NOT specify a type for this field as the UDF provides the definitions  ParseUserAgent(useragent) AS parsedAgent; "},{"uri":"/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/udf/commandline/","title":"Commandline usage","tags":[],"description":"","content":"Introduction With version 6.0 the dedicated commandline tool was removed.\nPrimary reason is that it was not getting any attention, and it did not perform well (mainly due to the relatively big startup overhead).\nSo if you have the need to use Yauaa from a commandline perspective the easiest way to do this is by starting the docker based webservlet locally (and leave it running \u0026ldquo;for a long time\u0026rdquo;) and use something like curl to get the information you are looking for.\nInitial startup Simply start the webservlet using docker and run it in the background (takes a few seconds):\ndocker pull nielsbasjes/yauaa:6.11 docker run --detach -p8080:8080 nielsbasjes/yauaa:6.11 Doing a single value AGENT=\u0026#34;Mozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD90Z) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.124 Mobile Safari/537.36\u0026#34;  curl -X POST \\  -H \u0026#34;Content-Type: text/plain\u0026#34; \\  http://localhost:8080/yauaa/v1/analyze/yaml \\  --data-binary \u0026#34;${AGENT}\u0026#34; Which outputs this:\n- test:  input:  user_agent_string: \u0026#39;Mozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD90Z) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.124 Mobile Safari/537.36\u0026#39;  expected:  DeviceClass : \u0026#39;Phone\u0026#39;  DeviceName : \u0026#39;Google Nexus 6\u0026#39;  DeviceBrand : \u0026#39;Google\u0026#39;  OperatingSystemClass : \u0026#39;Mobile\u0026#39;  OperatingSystemName : \u0026#39;Android\u0026#39;  OperatingSystemVersion : \u0026#39;7.0\u0026#39;  OperatingSystemVersionMajor : \u0026#39;7\u0026#39;  OperatingSystemNameVersion : \u0026#39;Android 7.0\u0026#39;  OperatingSystemNameVersionMajor : \u0026#39;Android 7\u0026#39;  OperatingSystemVersionBuild : \u0026#39;NBD90Z\u0026#39;  LayoutEngineClass : \u0026#39;Browser\u0026#39;  LayoutEngineName : \u0026#39;Blink\u0026#39;  LayoutEngineVersion : \u0026#39;53.0\u0026#39;  LayoutEngineVersionMajor : \u0026#39;53\u0026#39;  LayoutEngineNameVersion : \u0026#39;Blink 53.0\u0026#39;  LayoutEngineNameVersionMajor : \u0026#39;Blink 53\u0026#39;  AgentClass : \u0026#39;Browser\u0026#39;  AgentName : \u0026#39;Chrome\u0026#39;  AgentVersion : \u0026#39;53.0.2785.124\u0026#39;  AgentVersionMajor : \u0026#39;53\u0026#39;  AgentNameVersion : \u0026#39;Chrome 53.0.2785.124\u0026#39;  AgentNameVersionMajor : \u0026#39;Chrome 53\u0026#39; Doing a large number of values You can upload a file with useragents to the rest interface (there is a size limitation for this).\ncurl -X POST \\  -H \u0026#34;Content-Type: text/plain\u0026#34; \\  http://localhost:8080/yauaa/v1/analyze/yaml \\  --data-binary \u0026#34;@useragents.txt\u0026#34; "},{"uri":"/udf/elastic-logstash/","title":"Elastic LogStash","tags":[],"description":"","content":"Introduction User Defined Function (Filter plugin) for Elastic Logstash\nSTATUS: \u0026hellip; EXPERIMENTAL \u0026hellip; The logstash UDF java api is still experimental.\nSee for more information:\n https://github.com/logstash-plugins/logstash-filter-java_filter_example https://github.com/elastic/logstash/issues/9215  Getting the UDF You can get the prebuilt filter from the GitHub releases page.\nBuilding has side effects ! Because at this time none of the required dependencies are in maven central this build does something rarely seen:\nIt downloads the entire logstash distribution, extracts the logstash-core.jar and installs it locally for maven to use as dependency.\nSo your local maven repo will get a jar injected that is not normally available via Maven central or something similar.\nSee these for more details:\n https://github.com/nielsbasjes/yauaa/issues/146 https://github.com/elastic/logstash/issues/11002  Installing the filter You only need to install it into your logstash once per installation\nlogstash-plugin remove logstash-filter-yauaa logstash-plugin install ./udfs/logstash/target/logstash-filter-yauaa-6.11.gem Example usage You need to specify\n The source field For each Yauaa field you need the logstash field in which it needs to be placed.  filter { yauaa { source =\u0026gt; \u0026#34;message\u0026#34; fields =\u0026gt; { DeviceClass =\u0026gt; \u0026#34;DevCls\u0026#34; AgentNameVersion =\u0026gt; \u0026#34;AgntNmVrsn\u0026#34; } } } When running this example I get output like this that has the new fields \u0026ldquo;DevCls\u0026rdquo; and \u0026ldquo;AgntNmVrsn\u0026rdquo;:\n{ \u0026#34;@timestamp\u0026#34; =\u0026gt; 2019-02-13T10:42:57.491Z, \u0026#34;message\u0026#34; =\u0026gt; \u0026#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36\u0026#34;, \u0026#34;@version\u0026#34; =\u0026gt; \u0026#34;1\u0026#34;, \u0026#34;host\u0026#34; =\u0026gt; \u0026#34;niels-laptop\u0026#34;, \u0026#34;AgntNmVrsn\u0026#34; =\u0026gt; \u0026#34;Chrome 48.0.2564.82\u0026#34;, \u0026#34;DevCls\u0026#34; =\u0026gt; \u0026#34;Desktop\u0026#34;, \u0026#34;path\u0026#34; =\u0026gt; \u0026#34;/tmp/useragent.txt\u0026#34; } "},{"uri":"/udf/elastic-search/","title":"Elastic Search","tags":[],"description":"","content":"Introduction User Defined Function (ingest processor) for Elastic Search\nSTATUS: \u0026hellip; EXPERIMENTAL \u0026hellip; The ElasticSearch ingest plugin is very new.\nAnd yes it is similar to https://www.elastic.co/guide/en/elasticsearch/reference/master/user-agent-processor.html\nGetting the UDF You can get the prebuilt ingest plugin from maven central for\n Elastic Search 7.x. Elastic Search 8.x.  Installing the plugin You only need to install it into your Elastic Search once\nOn Elastic Search 7.x:\nbin/elasticsearch-plugin install file:///path/to/yauaa-elasticsearch-6.11.zip On Elastic Search 8.x\nbin/elasticsearch-plugin install file:///path/to/yauaa-elasticsearch-8-6.11.zip Usage This plugin is intended to be used in an ingest pipeline.\nYou have to specify the name of the input field and the place where the possible configuration flags are:\n   Name Mandatory/Optional Description Default Example     field M The name of the input field that contains the UserAgent string - \u0026quot;useragent\u0026quot;   target_field M The name of the output structure that will be filled with the parse results \u0026quot;user_agent\u0026quot; \u0026quot;parsed_ua\u0026quot;   fieldNames O A list of Yauaa fieldnames that are desired. When specified the system will limit processing to what is needed to get these. This means faster and less memory used. All possible fields [ \u0026quot;DeviceClass\u0026quot;, \u0026quot;DeviceBrand\u0026quot;, \u0026quot;DeviceName\u0026quot;, \u0026quot;AgentNameVersionMajor\u0026quot; ]   cacheSize O The number of entries in the LRU cache of the parser 10000 100   preheat O How many testcases are put through the parser at startup to warmup the JVM 0 1000   extraRules O A yaml expression that is a set of extra rules and testcases. - \u0026quot;config:\\n- matcher:\\n extract:\\n - '\u0026quot;'\u0026quot;'FirstProductName : 1 :agent.(1)product.(1)name'\u0026quot;'\u0026quot;'\\n\u0026quot;    Example usage Basic pipeline Create a pipeline that just extracts everything using the default settings:\ncurl -H \u0026#39;Content-Type: application/json\u0026#39; -X PUT \u0026#39;localhost:9200/_ingest/pipeline/yauaa-test-pipeline_basic\u0026#39; -d \u0026#39; { \u0026#34;description\u0026#34;: \u0026#34;A pipeline to do whatever\u0026#34;, \u0026#34;processors\u0026#34;: [ { \u0026#34;yauaa\u0026#34; : { \u0026#34;field\u0026#34; : \u0026#34;useragent\u0026#34;, \u0026#34;target_field\u0026#34; : \u0026#34;parsed\u0026#34; } } ] } \u0026#39; Common pipeline In this example a pipeline is created that only gets the fields that are actually desired.\ncurl -H \u0026#39;Content-Type: application/json\u0026#39; -X PUT \u0026#39;localhost:9200/_ingest/pipeline/yauaa-test-pipeline_some\u0026#39; -d \u0026#39; { \u0026#34;description\u0026#34;: \u0026#34;A pipeline to do whatever\u0026#34;, \u0026#34;processors\u0026#34;: [ { \u0026#34;yauaa\u0026#34; : { \u0026#34;field\u0026#34; : \u0026#34;useragent\u0026#34;, \u0026#34;target_field\u0026#34; : \u0026#34;parsed\u0026#34;, \u0026#34;fieldNames\u0026#34; : [ \u0026#34;DeviceClass\u0026#34;, \u0026#34;DeviceBrand\u0026#34;, \u0026#34;DeviceName\u0026#34;, \u0026#34;AgentNameVersionMajor\u0026#34;, \u0026#34;FirstProductName\u0026#34; ], } } ] } \u0026#39; Advanced pipeline In this example a pipeline is created that includes an example of a custom rule. The hardest part is making the yaml (with quotes, newlines and the needed indentation) encode correctly inside a JSon structure.\ncurl -H \u0026#39;Content-Type: application/json\u0026#39; -X PUT \u0026#39;localhost:9200/_ingest/pipeline/yauaa-test-pipeline_full\u0026#39; -d \u0026#39; { \u0026#34;description\u0026#34;: \u0026#34;A pipeline to do whatever\u0026#34;, \u0026#34;processors\u0026#34;: [ { \u0026#34;yauaa\u0026#34; : { \u0026#34;field\u0026#34; : \u0026#34;useragent\u0026#34;, \u0026#34;target_field\u0026#34; : \u0026#34;parsed\u0026#34;, \u0026#34;fieldNames\u0026#34; : [ \u0026#34;DeviceClass\u0026#34;, \u0026#34;DeviceBrand\u0026#34;, \u0026#34;DeviceName\u0026#34;, \u0026#34;AgentNameVersionMajor\u0026#34;, \u0026#34;FirstProductName\u0026#34; ], \u0026#34;cacheSize\u0026#34; : 10, \u0026#34;preheat\u0026#34; : 10, \u0026#34;extraRules\u0026#34; : \u0026#34;config:\\n- matcher:\\n extract:\\n - \u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;FirstProductName : 1 :agent.(1)product.(1)name\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;\\n\u0026#34; } } ] } \u0026#39; Put record I put a record in ElasticSearch using the above mentioned Advanced pipeline\ncurl -H \u0026#39;Content-Type: application/json\u0026#39; -X PUT \u0026#39;localhost:9200/my-index/my-type/1?pipeline=yauaa-test-pipeline_full\u0026#39; -d \u0026#39; { \u0026#34;useragent\u0026#34; : \u0026#34;Mozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD90Z) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.124 Mobile Safari/537.36\u0026#34; } \u0026#39; which returns\n{\u0026#34;_index\u0026#34;:\u0026#34;my-index\u0026#34;,\u0026#34;_type\u0026#34;:\u0026#34;my-type\u0026#34;,\u0026#34;_id\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;_version\u0026#34;:1,\u0026#34;result\u0026#34;:\u0026#34;created\u0026#34;,\u0026#34;_shards\u0026#34;:{\u0026#34;total\u0026#34;:2,\u0026#34;successful\u0026#34;:1,\u0026#34;failed\u0026#34;:0},\u0026#34;_seq_no\u0026#34;:0,\u0026#34;_primary_term\u0026#34;:1} then I retrieve the record from elasticsearch and the additional parse results are now part of the indexed record.\ncurl -s -H 'Content-Type: application/json' -X GET 'localhost:9200/my-index/my-type/1' | python -m json.tool  results in\n{ \u0026quot;_id\u0026quot;: \u0026quot;1\u0026quot;, \u0026quot;_index\u0026quot;: \u0026quot;my-index\u0026quot;, \u0026quot;_primary_term\u0026quot;: 1, \u0026quot;_seq_no\u0026quot;: 0, \u0026quot;_source\u0026quot;: { \u0026quot;parsed\u0026quot;: { \u0026quot;AgentName\u0026quot;: \u0026quot;Chrome\u0026quot;, \u0026quot;AgentNameVersionMajor\u0026quot;: \u0026quot;Chrome 53\u0026quot;, \u0026quot;AgentVersion\u0026quot;: \u0026quot;53.0.2785.124\u0026quot;, \u0026quot;AgentVersionMajor\u0026quot;: \u0026quot;53\u0026quot;, \u0026quot;DeviceBrand\u0026quot;: \u0026quot;Google\u0026quot;, \u0026quot;DeviceClass\u0026quot;: \u0026quot;Phone\u0026quot;, \u0026quot;DeviceName\u0026quot;: \u0026quot;Google Nexus 6\u0026quot;, \u0026quot;FirstProductName\u0026quot;: \u0026quot;Mozilla\u0026quot; }, \u0026quot;useragent\u0026quot;: \u0026quot;Mozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD90Z) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.124 Mobile Safari/537.36\u0026quot; }, \u0026quot;_type\u0026quot;: \u0026quot;my-type\u0026quot;, \u0026quot;_version\u0026quot;: 1, \u0026quot;found\u0026quot;: true }  NOTES for developers The ElasticSearch testing tools are quick to complain about jar classloading issues: \u0026ldquo;jar hell\u0026rdquo;.\nTo make it possible to test this in IntelliJ you\u0026rsquo;ll need to set a custom property\n Help \u0026ndash;\u0026gt; Edit Custom properties Make sure there is a line with idea.no.launcher=true Restart IntelliJ  See also https://stackoverflow.com/questions/51045201/using-the-elasticsearch-test-framework-in-intellij-how-to-resolve-the-jar-hell/51045272\n"},{"uri":"/udf/logparser/","title":"LogParser","tags":[],"description":"","content":"Introduction This is a User Defined Function for LogParser\nGetting the UDF You can get the prebuilt UDF from maven central.\nIf you use a maven based project simply add this dependency\n\u0026lt;dependency\u0026gt;  \u0026lt;groupId\u0026gt;nl.basjes.parse.useragent\u0026lt;/groupId\u0026gt;  \u0026lt;artifactId\u0026gt;yauaa-logparser\u0026lt;/artifactId\u0026gt;  \u0026lt;classifier\u0026gt;udf\u0026lt;/classifier\u0026gt;  \u0026lt;version\u0026gt;6.11\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Example usage -- Import the UDF jar file so this script can use it REGISTER *.jar; %declare LOGFILE 'access.log' %declare LOGFORMAT '%h %l %u %t \u0026quot;%r\u0026quot; %\u0026gt;s %b \u0026quot;%{Referer}i\u0026quot; \u0026quot;%{User-Agent}i\u0026quot;' OSName = LOAD '$LOGFILE' USING nl.basjes.pig.input.apachehttpdlog.Loader( '$LOGFORMAT' , '-load:nl.basjes.parse.useragent.dissector.UserAgentDissector:' , 'STRING:request.user-agent.operating_system_name_version' ) AS ( os_name:chararray ); OSNameCount = FOREACH OSName GENERATE os_name AS os_name:chararray, 1L AS clicks:long; CountsPerOSName = GROUeP OSNameCount BY (os_name); SumsPerOSName = FOREACH CountsPerOSName GENERATE SUM(OSNameCount.clicks) AS clicks, group AS useragent; DUMP SumsPerOSName; --STORE SumsPerOSName -- INTO 'TopUseragents' -- USING org.apache.pig.piggybank.storage.CSVExcelStorage('\t','NO_MULTILINE', 'UNIX');  "},{"uri":"/udf/snowflake/","title":"Snowflake","tags":[],"description":"","content":"Introduction User Defined Function for Snowflake.\nSTATUS: \u0026hellip; EXPERIMENTAL \u0026hellip; The Snowflake UDF is very experimental for two reasons:\n Snowflake has marked (last checked on 2021-11-07) Java based UDFs as a Preview Feature. I do not have Snowflake so I do not have any way of testing this other than getting feedback from you.  Thanks to Luke Ambrosetti for helping out here!\nSee for more information:\n https://docs.snowflake.com/en/developer-guide/udf/java/udf-java.html  Installation and usage   Download the UDF jar to the local file system and upload into a Snowflake internal or external stage.\nYou can get the prebuilt UDF from maven central.\n  Register the function in Snowflake with something like this:\n  create or replace function parse_useragent(useragent VARCHAR) returns object language java imports = (\u0026#39;@cs_stage/yauaa-snowflake-6.11-udf.jar\u0026#39;) handler=\u0026#39;nl.basjes.parse.useragent.snowflake.ParseUserAgent.parse\u0026#39;; And from there you can use it as a function in your SQL statements  select parse_useragent(\u0026#39;Mozilla/5.0 (Linux; Android 7.0; Nexus 6 Build/NBD90Z) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.124 Mobile Safari/537.36\u0026#39;) as ua_obj, ua_obj:AgentClass::string as agent_class; "},{"uri":"/udf/snowplow/","title":"Snowplow","tags":[],"description":"","content":"Introduction If you are a user of the Snowplow Analytics system and would like to use Yauaa in your analysis you are in luck.\nThe people at Snowplow have included Yauaa as a readily available feature in their system.\nThe official documentation: Snowplow Yauaa Enrichment\n"},{"uri":"/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"/udf/trino/","title":"Trino","tags":[],"description":"","content":"Introduction This is a User Defined Function for Trino (a.k.a. Presto SQL)\nSTATUS: \u0026hellip; EXPERIMENTAL \u0026hellip; The Trino plugin is very new. Please tell if it works or not in your case.\nInstallation You can get the prebuilt UDF from maven central.\nIn the plugin directory of your Trino server create a subdirectory and copy the yauaa-trino-6.11-udf.jar to that new directory.\nIn the trino docker image this is /usr/lib/trino/plugin/ so putting the jar in something like /usr/lib/trino/plugin/yauaa is a fine choice.\nImportant note: This directory may only contain this jar file; no other files may be present!\nExample usage This UDF provides a single new function parse_user_agent(\u0026lt;useragent\u0026gt;).\nThis function needs one input which is the UserAgent string that needs to be analyzed.\nThe return value is a map(varchar, varchar) which is a key value map of all possible properties.\nExample:\nSELECT parsedUseragent[\u0026#39;DeviceClass\u0026#39;] AS DeviceClass,  parsedUseragent[\u0026#39;AgentNameVersionMajor\u0026#39;] AS AgentNameVersionMajor FROM (  SELECT useragent,  parse_user_agent(useragent) AS parsedUseragent  FROM (  SELECT useragent  FROM (  VALUES (\u0026#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36\u0026#39;)  ) AS t (useragent)  ) ); Outputs:\n DeviceClass | AgentNameVersionMajor -------------+----------------------- Desktop | Chrome 98 (1 row) "},{"uri":"/","title":"Yauaa: Yet Another UserAgent Analyzer","tags":[],"description":"","content":"Yauaa: Yet Another UserAgent Analyzer This is a java library that tries to parse and analyze the useragent string and extract as many relevant attributes as possible.\nWorks with Java, Scala, Kotlin and provides ready for use UDFs for several processing systems.\nThe full documentation can be found here https://yauaa.basjes.nl\n HIGH Profile release notes: Version 6.11  Handle the Edge 99+ edge://flags/#force-major-version-to-minor Report frozen Windows 10 on Chrome/Edge/\u0026hellip; 92+ as Windows \u0026gt;=10  Version 6.10  New UDF for Trino (a.k.a. Presto SQL)  See https://yauaa.basjes.nl/udf/trino/ for usage information.    Version 6.9  Report frozen Windows 10 on Firefox 88+ as Windows \u0026gt;=10 Detect several types of TVs and Set-top boxes better. Contributed by Sam Hendley.  Version 6.8  The list of returned fields is more consistent (including the \u0026ldquo;Default\u0026rdquo; values). Fix detection of Samsung SC-\u0026hellip; devices. Switched the default caching implementation to Caffeine NOTE: Caffeine needs Java 11. If you still need to run on Java 8 you can change the caching implementation used back to any other implementation.  Version 6.7  Updated log4j to 2.17.1 Allow providing a custom caching implementation. Builds with JDK 17  Version 6.3  Report frozen (=manipulated) Mac OS X versions as ??:  Always 10_15_7 since Chrome 90. Always 10.15 since Firefox 87.     Regarding the recent Log4J2 issues The Yauaa analyzer uses the Log4J2 API to do the logging and through the included dependencies also JCL and SLF4J are needed to run.\nTL;DR:\n The core of Yauaa is safe as it does not include any logging dependencies and expects the application to provide everything. In normal operations user input is not logged. The Snowflake UDF is affected by these problems (due to shading the dependencies in).  NO batteries included By design the Yauaa library expects the application in which it is used to provide the actual logging dependencies and configuration. If you do not provide the needed logging classes it will simply fail at startup.\nSo by design the Yauaa library expects all of these frameworks to be provided (and configured) and does not include any of them or any configuration for them.\nThis is true for most of the released artifacts (including the base library) except for the Snowflake UDF which does include almost all dependencies. So the Snowflake UDF IS affected by this issue and all users are recommended to update.\nMinimal logging Note that Yauaa does not log any user input and/or analysis results from user input during normal operation. Only during development and during unit tests the Useragents are logged.\nThis is because it was designed to run in very large scale batch and streaming situations (very large as in \u0026ldquo;Let\u0026rsquo;s analyze these 10^10 records\u0026rdquo;).\nBring your own batteries To assist in running Yauaa without the logj4-core jar an example was created that only uses SLF4J: here.\n Donations If this project has business value for you then don\u0026rsquo;t hesitate to support me with a small donation.\n\n License Yet Another UserAgent Analyzer Copyright (C) 2013-2022 Niels Basjes Licensed under the Apache License, Version 2.0 (the \u0026quot;License\u0026quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u0026quot;AS IS\u0026quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  "}]