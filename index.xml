<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yauaa: Yet Another UserAgent Analyzer on Yauaa - Yet Another UserAgent Analyzer</title><link>/</link><description>Recent content in Yauaa: Yet Another UserAgent Analyzer on Yauaa - Yet Another UserAgent Analyzer</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Blogpost</title><link>/other/article/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/other/article/</guid><description>A bit more background about this useragent parser can be found in this blog which I wrote about it: https://techlab.bol.com/making-sense-user-agent-string/</description></item><item><title>Building from source</title><link>/developer/building/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/developer/building/</guid><description>Building Requirements:
A Linux class machine (can be a VM) The normal build tools for a Java project (i.e. maven 3.6+ and jdk 11) The ./start-docker.sh script launches a docker based build environment with all needed tools. and then simply do:
mvn clean package</description></item><item><title>Field values</title><link>/expect/fieldvalues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/expect/fieldvalues/</guid><description>Output fields The resulting output fields can be classified into several categories:
The Device: The hardware that was used. The Operating System: The base software that runs on the hardware The Layout Engine: The underlying core that converts the &amp;lsquo;HTML&amp;rsquo; into a visual/interactive The Agent: The actual &amp;ldquo;Browser&amp;rdquo; that was used. Extra fields: In some cases we have additional fields to describe the agent. These fields are among others specific fields for the Facebook and Kobo apps, and fields to describe deliberate useragent manipulation situations (Anonymization, Hackers, etc.</description></item><item><title>User-Agent Client Hints</title><link>/using/clienthints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/using/clienthints/</guid><description>The User-Agent and the User-Agent Client Hints From about 2019 onward several of the main browsers (Firefox/Chromium/Chrome/Edge/&amp;hellip;) have been making steps to reduce the information in the User-Agent. The main reason is that the User-Agents so far have so much detailled information that it became so unique that some could be used as a device id for tracking purposes.
In addition, steps are taken to provide information to website builders that is intended to be sufficient for running a website and less prone to tracking people.</description></item><item><title>Base Design</title><link>/developer/basedesign/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/developer/basedesign/</guid><description>Parsing Useragents Parsing useragents is considered by many to be a ridiculously hard problem. The main problems are:
Although there seems to be a specification, many do not follow it. Useragents LIE that they are their competing predecessor with an extra flag. The pattern the &amp;rsquo;normal&amp;rsquo; browser builders are following is that they all LIE about the ancestor they are trying to improve upon.
The reason this system (historically) works is because a lot of website builders do a very simple check to see if they can use a specific feature.</description></item><item><title>Performance</title><link>/expect/performance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/expect/performance/</guid><description>On my i7 system I see a speed ranging from 500 to 4000 useragents per second (depending on the length and ambiguities in the useragent). On average the speed is around 2000 per second or ~0.5ms each. A LRU cache is in place that does over 1M per second if they are in the cache.
Please note that the current system take approx 220MiB of RAM just for the engine (without any caching!</description></item><item><title>Related projects</title><link>/other/relatedprojects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/other/relatedprojects/</guid><description>.NET port Stefano Balzarotti is putting a lot of effort into porting Yauaa to run in .NET standard.
You can track his efforts here on GitHub: Yauaa .NET standard and download his releases via Nuget.</description></item><item><title>Limitations</title><link>/expect/limitations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/expect/limitations/</guid><description>It only analyzes the provided string This system is based on analyzing the useragent string and looking for the patterns in the useragent string as they have been defined by parties like Google, Microsoft, Samsung and many others. These have been augmented with observations how developers apparently do things. There are really no (ok, very limited) lookup tables that define if a certain device name is a Phone or a Tablet.</description></item><item><title>Making new rules</title><link>/developer/makingnewrules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/developer/makingnewrules/</guid><description>Detecting new useragent patterns When you find a useragent for which one or more of the fields are wrong there is the need to change the patterns and rules that are used by this system for classifying these attributes. In order to write rules this first described how the system works and what tools have been created to make writing new rules easier.
Base problem: They all lie When looking at useragents it is clear that almost all of them include the name of predecessors/competitors with which they are supposed to be compatible with.</description></item><item><title>Manipulations</title><link>/expect/manipulations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/expect/manipulations/</guid><description>Privacy Useragents have had a lot of information about the device and the browser in it. This has been so detailled in the past that there were many situations where the useragents could be used for tracking visitors very reliably.
Reducing/Freezing the UserAgent So a few years ago in several browsers projects started to reduce the level of information in the UserAgent. As a direct consequence the analysis results will become less usefull over time as browsers will start taking away more and more information.</description></item><item><title>Memory usage</title><link>/using/memoryusage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/using/memoryusage/</guid><description>The system relies heavily on HashMaps to quickly find the rules that need to be fired.
Some fields only require a handful of rules where others have a lot of them. This means that it depends on the fields that have been requested how many rules are kept in the system and thus how much memory is used to store the rules in. To get an idea of the relative memory impact of the rules needed for a specific field.</description></item><item><title>Shading dependencies</title><link>/developer/shadingdependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/developer/shadingdependencies/</guid><description>Introduction This is a summary of the reasons WHY I have done the shading in this project the way it is now.
If someone has suggestions/hint on how this can be done better I&amp;rsquo;m really curious what the &amp;lsquo;right&amp;rsquo; way of doing this is.
The base structure of this project is we have a module with the functionality and a set of &amp;lsquo;UDFs&amp;rsquo; that wrap this functionality so that it can be used in external processing frameworks (like Pig, Flink, Hive, etc.</description></item><item><title>Try it!</title><link>/expect/tryit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/expect/tryit/</guid><description>You can try it online with your own browser here: https://try.yauaa.basjes.nl/.
NOTES
This runs on a very slow and rate limited machine. If you really like this then run it on your local systems. It&amp;rsquo;s much faster that way. A Kubernetes ready Docker image is provided. See this page about the WebServlet for more information.</description></item><item><title>The demonstration webservlet</title><link>/using/webservlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/using/webservlet/</guid><description>Part of the distribution is a war file that is a servlet that has a webinterface and some APIs that allow you to try things out.
This servlet can be downloaded via
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.12&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;war&amp;lt;/type&amp;gt; &amp;lt;/dependency&amp;gt; NOTE that this is a DEMONSTRATION servlet!
It is simply the library in a servlet, no optimizations or smart memory settings have been done at all.
Docker Starting with version 5.</description></item><item><title>Kubernetes</title><link>/using/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/using/kubernetes/</guid><description>I&amp;rsquo;ve been playing around with Kubernetes and the code below &amp;ldquo;works on my cluster&amp;rdquo;.
Basic Service First create a dedicated namespace and a very basic deployment to run this image 3 times and exposes it as a Service that simply does http.
apiVersion: v1 kind: Namespace metadata: name: yauaa --- apiVersion: apps/v1 kind: Deployment metadata: name: yauaa namespace: yauaa spec: selector: matchLabels: app: yauaa replicas: 3 template: metadata: labels: app: yauaa spec: containers: - name: yauaa image: nielsbasjes/yauaa:6.</description></item><item><title>Licence</title><link>/using/license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/using/license/</guid><description>Apache License Version 2.0, January 2004 https://www.apache.org/licenses/
TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.
Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.
Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity.</description></item><item><title>Apache Beam</title><link>/udf/apache-beam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-beam/</guid><description>Introduction This is a User Defined Function for Apache Beam
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency to your project.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-beam&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Usage Assume you have a PCollection with your records. In most cases I see (clickstream data) these records (In this example this class is called &amp;ldquo;TestRecord&amp;rdquo;) contain the useragent string in a field and the parsed results must be added to these fields.</description></item><item><title>Apache Beam SQL</title><link>/udf/apache-beam-sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-beam-sql/</guid><description>Introduction This is a User Defined Function for Apache Beam SQL.
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency to your project.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-beam-sql&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Available functions Getting a single value To get a single value from the parse result use this one:
ParseUserAgentField(userAgent, 'DeviceClass') AS deviceClassField to give</description></item><item><title>Apache Drill</title><link>/udf/apache-drill/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-drill/</guid><description>Introduction This is UDF for Apache Drill. This function was originally created by Charles S. Givre and was imported into the main Yauaa project to ensure users would have a prebuilt and up-to-date version available.
This function is now also packaged as part of Apache Drill itself: documentation.
STATUS: &amp;hellip; Works on my machine &amp;hellip; I have copied/implemented the functions
parse_user_agent ( &amp;lt;useragent&amp;gt; ) parse_user_agent_field ( &amp;lt;useragent&amp;gt; , &amp;lt;desired fieldname&amp;gt; ) Able to do basic unit test during build for the parse_user_agent_field function.</description></item><item><title>Apache Flink</title><link>/udf/apache-flink/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-flink/</guid><description>Introduction This is a User Defined Function for Apache Flink
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency to your project.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-flink&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Usage Assume you have a DataSet or DataStream with your records. In most cases I see (clickstream data) these records (In this example this class is called &amp;ldquo;TestRecord&amp;rdquo;) contain the useragent string in a field and the parsed results must be added to these fields.</description></item><item><title>Apache Flink Table/SQL</title><link>/udf/apache-flink-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-flink-table/</guid><description>Introduction This is a User Defined Function for Apache Flink Table
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency to your project.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-flink-table&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Syntax Assume you register this function under the name ParseUserAgent Then the generic usage in your SQL is
ParseUserAgent(&amp;lt;useragent&amp;gt;) This returns a Map&amp;lt;String, String&amp;gt; with all the requested values in one go.</description></item><item><title>Apache Hive</title><link>/udf/apache-hive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-hive/</guid><description>Introduction This is a User Defined Function for Apache Hive
Getting the UDF You can get the prebuilt UDF from maven central (yauaa-hive-6.12-udf.jar).
NOTE: You MUST use the -udf.jar: yauaa-hive-6.12-udf.jar
If you use a maven based project simply add this dependency
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-hive&amp;lt;/artifactId&amp;gt; &amp;lt;classifier&amp;gt;udf&amp;lt;/classifier&amp;gt; &amp;lt;version&amp;gt;6.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Building Simply install the normal build tools for a Java project (i.e. maven and jdk) and then simply do:</description></item><item><title>Apache Pig</title><link>/udf/apache-pig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-pig/</guid><description>DEPRECATED Apache Pig is no longer used. So with Yauaa 7 this UDF has been dropped.
Introduction This is a User Defined Function for Apache Pig
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-pig&amp;lt;/artifactId&amp;gt; &amp;lt;classifier&amp;gt;udf&amp;lt;/classifier&amp;gt; &amp;lt;version&amp;gt;6.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Example usage -- Import the UDF jar file so this script can use it REGISTER .</description></item><item><title>Commandline usage</title><link>/udf/commandline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/commandline/</guid><description>Introduction With version 6.0 the dedicated commandline tool was removed.
Primary reason is that it was not getting any attention, and it did not perform well (mainly due to the relatively big startup overhead).
So if you have the need to use Yauaa from a commandline perspective the easiest way to do this is by starting the docker based webservlet locally (and leave it running &amp;ldquo;for a long time&amp;rdquo;) and use something like curl to get the information you are looking for.</description></item><item><title>Elastic LogStash</title><link>/udf/elastic-logstash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/elastic-logstash/</guid><description>Introduction User Defined Function (Filter plugin) for Elastic Logstash
STATUS: &amp;hellip; EXPERIMENTAL &amp;hellip; The logstash UDF java api is still experimental.
See for more information:
https://github.com/logstash-plugins/logstash-filter-java_filter_example https://github.com/elastic/logstash/issues/9215 Getting the UDF You can get the prebuilt filter from the GitHub releases page.
Building has side effects ! Because at this time none of the required dependencies are in maven central this build does something rarely seen:
It downloads the entire logstash distribution, extracts the logstash-core.</description></item><item><title>Elastic Search</title><link>/udf/elastic-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/elastic-search/</guid><description>Introduction User Defined Function (ingest processor) for Elastic Search
STATUS: &amp;hellip; EXPERIMENTAL &amp;hellip; The ElasticSearch ingest plugin is very new.
And yes it is similar to https://www.elastic.co/guide/en/elasticsearch/reference/master/user-agent-processor.html
Getting the UDF You can get the prebuilt ingest plugin from maven central for
Elastic Search 7.x. Elastic Search 8.x. Installing the plugin You only need to install it into your Elastic Search once
On Elastic Search 7.x:
bin/elasticsearch-plugin install file:///path/to/yauaa-elasticsearch-6.12.zip On Elastic Search 8.</description></item><item><title>LogParser</title><link>/udf/logparser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/logparser/</guid><description>Introduction This is a User Defined Function for LogParser
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-logparser&amp;lt;/artifactId&amp;gt; &amp;lt;classifier&amp;gt;udf&amp;lt;/classifier&amp;gt; &amp;lt;version&amp;gt;6.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Client hints Because the logparser can only dissect a single field into multiple pieces it is impossible to extend this to support User-Agent Client Hints.
Example usage</description></item><item><title>Snowplow</title><link>/udf/snowplow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/snowplow/</guid><description>Introduction If you are a user of the Snowplow Analytics system and would like to use Yauaa in your analysis you are in luck.
The people at Snowplow have included Yauaa as a readily available feature in their system.
The official documentation: Snowplow Yauaa Enrichment</description></item><item><title>Trino</title><link>/udf/trino/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/trino/</guid><description>Introduction This is a User Defined Function for Trino (a.k.a. Presto SQL)
STATUS: &amp;hellip; EXPERIMENTAL &amp;hellip; The Trino plugin is very new. Please tell if it works or not in your case.
Installation You can get the prebuilt UDF from maven central.
In the plugin directory of your Trino server create a subdirectory and copy the yauaa-trino-6.12-udf.jar to that new directory.
In the trino docker image this is /usr/lib/trino/plugin/ so putting the jar in something like /usr/lib/trino/plugin/yauaa is a fine choice.</description></item></channel></rss>