<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>User Defined Functions on Yauaa - Yet Another UserAgent Analyzer</title><link>/udf/</link><description>Recent content in User Defined Functions on Yauaa - Yet Another UserAgent Analyzer</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/udf/index.xml" rel="self" type="application/rss+xml"/><item><title>Apache Beam</title><link>/udf/apache-beam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-beam/</guid><description>Introduction This is a User Defined Function for Apache Beam
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency to your project.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-beam&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Example usage Assume you have a PCollection with your records. In most cases I see (clickstream data) these records (In this example this class is called &amp;ldquo;TestRecord&amp;rdquo;) contain the useragent string in a field and the parsed results must be added to these fields.</description></item><item><title>Apache Beam SQL</title><link>/udf/apache-beam-sql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-beam-sql/</guid><description>Introduction This is a User Defined Function for Apache Beam SQL.
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency to your project.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-beam-sql&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Available functions Getting a single value To get a single value from the parse result use this one:
ParseUserAgentField(userAgent, 'DeviceClass') AS deviceClassField to give
Phone Getting several values as a Map (requires Apache Beam 2.</description></item><item><title>Apache Drill</title><link>/udf/apache-drill/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-drill/</guid><description>Introduction This is UDF for Apache Drill. This function was originally created by Charles S. Givre and was imported into the main Yauaa project to ensure users would have a prebuilt and up-to-date version available.
This function is now also packaged as part of Apache Drill itself: documentation.
STATUS: &amp;hellip; Works on my machine &amp;hellip; I have copied/implemented the functions
parse_user_agent ( &amp;lt;useragent&amp;gt; ) parse_user_agent_field ( &amp;lt;useragent&amp;gt; , &amp;lt;desired fieldname&amp;gt; ) Able to do basic unit test during build for the parse_user_agent_field function.</description></item><item><title>Apache Flink</title><link>/udf/apache-flink/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-flink/</guid><description>Introduction This is a User Defined Function for Apache Flink
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency to your project.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-flink&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Example usage Assume you have a DataSet or DataStream with your records. In most cases I see (clickstream data) these records (In this example this class is called &amp;ldquo;TestRecord&amp;rdquo;) contain the useragent string in a field and the parsed results must be added to these fields.</description></item><item><title>Apache Flink Table/SQL</title><link>/udf/apache-flink-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-flink-table/</guid><description>Introduction This is a User Defined Function for Apache Flink Table
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency to your project.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-flink-table&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; IMPORTANT: Breaking API change In version 5.15 this function was rewritten and as a consequence the API has changed.
The function now returns a Map&amp;lt;String, String&amp;gt; with all the requested values in one go.</description></item><item><title>Apache Hive</title><link>/udf/apache-hive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-hive/</guid><description>Introduction This is a User Defined Function for Apache Hive
Getting the UDF You can get the prebuilt UDF from maven central (yauaa-hive-6.9-udf.jar).
NOTE: You MUST use the -udf.jar: yauaa-hive-6.9-udf.jar
If you use a maven based project simply add this dependency
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-hive&amp;lt;/artifactId&amp;gt; &amp;lt;classifier&amp;gt;udf&amp;lt;/classifier&amp;gt; &amp;lt;version&amp;gt;6.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Building Simply install the normal build tools for a Java project (i.e. maven and jdk) and then simply do:
mvn clean package Example usage First the jar file must be &amp;lsquo;known&amp;rsquo; Either by doing</description></item><item><title>Apache Pig</title><link>/udf/apache-pig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/apache-pig/</guid><description>Introduction This is a User Defined Function for Apache Pig
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-pig&amp;lt;/artifactId&amp;gt; &amp;lt;classifier&amp;gt;udf&amp;lt;/classifier&amp;gt; &amp;lt;version&amp;gt;6.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Example usage -- Import the UDF jar file so this script can use it REGISTER ../target/*-udf.jar; ------------------------------------------------------------------------ -- Define a more readable name for the UDF and pass optional parameters -- First parameter is ALWAYS the cache size (as a text string!</description></item><item><title>Commandline usage</title><link>/udf/commandline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/commandline/</guid><description>Introduction With version 6.0 the dedicated commandline tool was removed.
Primary reason is that it was not getting any attention, and it did not perform well (mainly due to the relatively big startup overhead).
So if you have the need to use Yauaa from a commandline perspective the easiest way to do this is by starting the docker based webservlet locally (and leave it running &amp;ldquo;for a long time&amp;rdquo;) and use something like curl to get the information you are looking for.</description></item><item><title>Elastic LogStash</title><link>/udf/elastic-logstash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/elastic-logstash/</guid><description>Introduction User Defined Function (Filter plugin) for Elastic Logstash
STATUS: &amp;hellip; EXPERIMENTAL &amp;hellip; The logstash UDF java api is still experimental.
See for more information:
https://github.com/logstash-plugins/logstash-filter-java_filter_example https://github.com/elastic/logstash/issues/9215 Getting the UDF You can get the prebuilt filter from the GitHub releases page.
Building has side effects ! Because at this time none of the required dependencies are in maven central this build does something rarely seen:
It downloads the entire logstash distribution, extracts the logstash-core.</description></item><item><title>Elastic Search</title><link>/udf/elastic-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/elastic-search/</guid><description>Introduction User Defined Function (ingest processor) for Elastic Search
STATUS: &amp;hellip; EXPERIMENTAL &amp;hellip; The ElasticSearch ingest plugin is very new.
And yes it is similar to https://www.elastic.co/guide/en/elasticsearch/reference/master/user-agent-processor.html
Getting the UDF You can get the prebuilt ingest plugin from maven central.
Installing the plugin You only need to install it into your elasticsearch once
bin/elasticsearch-plugin install file:///path/to/yauaa-elasticsearch-6.9.zip Usage This plugin is intended to be used in an ingest pipeline.
You have to specify the name of the input field and the place where the possible configuration flags are:</description></item><item><title>LogParser</title><link>/udf/logparser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/logparser/</guid><description>Introduction This is a User Defined Function for LogParser
Getting the UDF You can get the prebuilt UDF from maven central.
If you use a maven based project simply add this dependency
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;nl.basjes.parse.useragent&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;yauaa-logparser&amp;lt;/artifactId&amp;gt; &amp;lt;classifier&amp;gt;udf&amp;lt;/classifier&amp;gt; &amp;lt;version&amp;gt;6.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Example usage -- Import the UDF jar file so this script can use it REGISTER *.jar; %declare LOGFILE 'access.log' %declare LOGFORMAT '%h %l %u %t &amp;quot;%r&amp;quot; %&amp;gt;s %b &amp;quot;%{Referer}i&amp;quot; &amp;quot;%{User-Agent}i&amp;quot;' OSName = LOAD '$LOGFILE' USING nl.</description></item><item><title>Snowplow</title><link>/udf/snowplow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/udf/snowplow/</guid><description>Introduction If you are a user of the Snowplow Analytics system and would like to use Yauaa in your analysis you are in luck.
The people at Snowplow have included Yauaa as a readily available feature in their system.
The official documentation: Snowplow Yauaa Enrichment</description></item></channel></rss>